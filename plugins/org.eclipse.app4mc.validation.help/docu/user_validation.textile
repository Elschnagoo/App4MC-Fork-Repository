
h1. Model Validation
 
h3. Usage of Check-based Validation

The AMALTHEA validation can be triggered by right clicking a model element in the left Model Explorer View and choose in the context menu Validate - Check-based Validation.

!(gray)../pictures/validation/2015-06-18_1_sphinx_validation_trigger_command.png!

All AMALTHEA sub elements of the chosen element are then included for the validation. In the next window the catalog appears allowing the selection of specific validation checks based on your selected model. Button "Select All" will select all listed validation checks for execution. Each entry of the catalog is called __Category__ which may contain several validation checks (i.e. constraints). The simplest way is to define a 1:1 relationship between category and constraint.

!(gray)../pictures/validation/2015-06-18_2_sphinx_validation_catalog.png!

If an error is found, it is shown in the Problems view of Eclipse. A simple double click on the error will lead you to the affected elements in the AMALTHEA model. Sphinx validation distinguishes between three error types: __errors__, __warnings__ and __info__.

!(gray)../pictures/validation/2015-06-18_3_sphinx_validation_results.png!


h3. Available Validations

The plugin __org.eclipse.app4mc.amalthea.validation__ contains several validators and constraints (i.e. checks) for various model types of AMALTHEA.

h4. Basic Check Validator

Basic checks which cannot be assigned to a specific AMALTHEA model are summarized. Responsible implementation for this validation is the class @org.eclipse.app4mc.amalthea.validation.checks.BasicCheckValidator@.

**Missing Referable Name**
Checks the name of all objects that are instances of @IReferable@. The name is used to refer to objects in the AMALTHEA model, therefore missing names are handled as an **__error__**.

**Duplicate Unique Name**
Checks the unique name of all objects that are instances of @IReferable@. The unique name is used to refer to objects in the AMALTHEA model, therefore duplicates are handled as an **__error__**.
	 
**Undefined Unit**
Checks all units: @TimeUnit@, @FrequencyUnit@, @DataSizeUnit@, @DataRateUnit@.
If the unit is undefined, it will be handled as an **__error__**.

**Custom Property Duplicate Key**
A validation to check all custom attributes of one element. If it contains duplicate key entries, it is treated as a **__warning__**.

**Weibull Parameters**
Checks the parameters in the __Distribution__ of type __WeibullEstimators__. The parameters must not be equal to each other, if this is the case, it will be handled as an **__warning__**.


h4. ConstraintsModel Check Validator

Responsible implementation for this validation is the class @org.eclipse.app4mc.amalthea.validation.checks.ConstraintsModelCheckValidator@.

**EventChainsConstraint**
Checks for the AMALTHEA constraints model if the __EventChains__ are consistent regarding completeness (fully build chain) and correctness. Therefore each EventChain's stimulus/response pair is checked if events are existent and linked properly to a complete chain. An event chain of type __SubEventChain__ is checked for its "border" events fit to the stimulus and response event of the parent event chain. Cascades of sub events are processed recursively. A missing or wrong information in the event chain will be handled as an **__error__**. 


h4. MappingModel Check Validator

Responsible implementation for this validation is the class @org.eclipse.app4mc.amalthea.validation.checks.MappingModelCheckValidator@.

**Process2Scheduler2CoreMappingConstraint**
Checks for the entire AMALTHEA model instance if the mapping information are complete and correct between __Software__(SW) <-> __Operating System__(OS) <-> __Software__(SW) model. I.e. mapping relationship {Process(SW) to Scheduler(OS) to Core(HW)}. A missing mapping information (i.e. no Entity) or unmapped Processes will be handled as an **__error__**.


h4. EventModel Check Validator

Responsible implementation for this validation is the class @org.eclipse.app4mc.amalthea.validation.checks.EventModelCheckValidator@.

__to be extended__


h4. HardwareModel Check Validator

Responsible implementation for this validation is the class @org.eclipse.app4mc.amalthea.validation.checks.HardwareModelCheckValidator@.

__to be extended__

