<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<xsd:schema xmlns:am="http://app4mc.eclipse.org/amalthea/0.7.0" xmlns:ecore="http://www.eclipse.org/emf/2002/Ecore" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsd="http://www.w3.org/2001/XMLSchema" targetNamespace="http://app4mc.eclipse.org/amalthea/0.7.0">
  <xsd:annotation>
    <xsd:documentation>*
*******************************************************************************
 Copyright (c) 2016 Robert Bosch GmbH and others.
 All rights reserved. This program and the accompanying materials
 are made available under the terms of the Eclipse Public License v1.0
 which accompanies this distribution, and is available at
 http://www.eclipse.org/legal/epl-v10.html
*******************************************************************************</xsd:documentation>
  </xsd:annotation>
  <xsd:import namespace="http://www.eclipse.org/emf/2002/Ecore" schemaLocation="ecore.xsd"/>
  <xsd:import namespace="http://www.omg.org/XMI" schemaLocation="platform:/plugin/org.eclipse.emf.ecore/model/XMI.xsd"/>
  <xsd:simpleType name="TimeUnit">
    <xsd:annotation>
      <xsd:documentation>Time unit enumeration for available units.</xsd:documentation>
    </xsd:annotation>
    <xsd:restriction base="xsd:NCName">
      <xsd:enumeration value="_undefined_"/>
      <xsd:enumeration value="s"/>
      <xsd:enumeration value="ms"/>
      <xsd:enumeration value="us"/>
      <xsd:enumeration value="ns"/>
      <xsd:enumeration value="ps"/>
    </xsd:restriction>
  </xsd:simpleType>
  <xsd:simpleType name="FrequencyUnit">
    <xsd:annotation>
      <xsd:documentation>Frequency unit enumeration for available units</xsd:documentation>
    </xsd:annotation>
    <xsd:restriction base="xsd:NCName">
      <xsd:enumeration value="_undefined_"/>
      <xsd:enumeration value="Hz"/>
      <xsd:enumeration value="kHz"/>
      <xsd:enumeration value="MHz"/>
      <xsd:enumeration value="GHz"/>
    </xsd:restriction>
  </xsd:simpleType>
  <xsd:simpleType name="InterfaceKind">
    <xsd:restriction base="xsd:NCName">
      <xsd:enumeration value="_undefined_"/>
      <xsd:enumeration value="provides"/>
      <xsd:enumeration value="requires"/>
    </xsd:restriction>
  </xsd:simpleType>
  <xsd:simpleType name="RunnableOrderType">
    <xsd:restriction base="xsd:NCName">
      <xsd:enumeration value="_undefined_"/>
      <xsd:enumeration value="successor"/>
      <xsd:enumeration value="immediateSuccessorStartSequence"/>
      <xsd:enumeration value="immediateSuccessorAnySequence"/>
      <xsd:enumeration value="immediateSuccessorEndSequence"/>
    </xsd:restriction>
  </xsd:simpleType>
  <xsd:simpleType name="RunnableGroupingType">
    <xsd:restriction base="xsd:NCName">
      <xsd:enumeration value="_undefined_"/>
      <xsd:enumeration value="allOfThem"/>
      <xsd:enumeration value="atLeastOneOfThem"/>
    </xsd:restriction>
  </xsd:simpleType>
  <xsd:simpleType name="Severity">
    <xsd:restriction base="xsd:NCName">
      <xsd:enumeration value="_undefined_"/>
      <xsd:enumeration value="Cosmetic"/>
      <xsd:enumeration value="Minor"/>
      <xsd:enumeration value="Major"/>
      <xsd:enumeration value="Critical"/>
    </xsd:restriction>
  </xsd:simpleType>
  <xsd:simpleType name="LimitType">
    <xsd:restriction base="xsd:NCName">
      <xsd:enumeration value="_undefined_"/>
      <xsd:enumeration value="UpperLimit"/>
      <xsd:enumeration value="LowerLimit"/>
    </xsd:restriction>
  </xsd:simpleType>
  <xsd:simpleType name="TimeMetric">
    <xsd:restriction base="xsd:NCName">
      <xsd:enumeration value="_undefined_"/>
      <xsd:enumeration value="ActivateToActivate"/>
      <xsd:enumeration value="CoreExecutionTime"/>
      <xsd:enumeration value="EndToEnd"/>
      <xsd:enumeration value="GrossExecutionTime"/>
      <xsd:enumeration value="Lateness"/>
      <xsd:enumeration value="MemoryAccessTime"/>
      <xsd:enumeration value="NetExecutionTime"/>
      <xsd:enumeration value="OsOverhead"/>
      <xsd:enumeration value="ParkingTime"/>
      <xsd:enumeration value="PollingTime"/>
      <xsd:enumeration value="ReadyTime"/>
      <xsd:enumeration value="ResponseTime"/>
      <xsd:enumeration value="RunningTime"/>
      <xsd:enumeration value="StartDelay"/>
      <xsd:enumeration value="StartToStart"/>
      <xsd:enumeration value="WaitingTime"/>
    </xsd:restriction>
  </xsd:simpleType>
  <xsd:simpleType name="CountMetric">
    <xsd:restriction base="xsd:NCName">
      <xsd:enumeration value="_undefined_"/>
      <xsd:enumeration value="Activations"/>
      <xsd:enumeration value="BoundedMigrations"/>
      <xsd:enumeration value="CacheHit"/>
      <xsd:enumeration value="CacheMiss"/>
      <xsd:enumeration value="FullMigrations"/>
      <xsd:enumeration value="MtaLimitExceeding"/>
      <xsd:enumeration value="Preemptions"/>
    </xsd:restriction>
  </xsd:simpleType>
  <xsd:simpleType name="PercentageMetric">
    <xsd:restriction base="xsd:NCName">
      <xsd:enumeration value="_undefined_"/>
      <xsd:enumeration value="CacheHitRatio"/>
      <xsd:enumeration value="CacheMissRatio"/>
      <xsd:enumeration value="CoreExecutionTimeRelative"/>
      <xsd:enumeration value="MemoryAccessTimeRelative"/>
      <xsd:enumeration value="NormalizedLateness"/>
      <xsd:enumeration value="NormalizedResponseTime"/>
      <xsd:enumeration value="OsOverheadRelative"/>
    </xsd:restriction>
  </xsd:simpleType>
  <xsd:simpleType name="CPUPercentageMetric">
    <xsd:restriction base="xsd:NCName">
      <xsd:enumeration value="_undefined_"/>
      <xsd:enumeration value="CPUBuffering"/>
      <xsd:enumeration value="CPULoad"/>
      <xsd:enumeration value="CPUParking"/>
      <xsd:enumeration value="CPUPolling"/>
      <xsd:enumeration value="CPUReady"/>
      <xsd:enumeration value="CPURunning"/>
      <xsd:enumeration value="CPUWaiting"/>
    </xsd:restriction>
  </xsd:simpleType>
  <xsd:simpleType name="FrequencyMetric">
    <xsd:restriction base="xsd:NCName">
      <xsd:enumeration value="_undefined_"/>
      <xsd:enumeration value="CacheHitFrequency"/>
      <xsd:enumeration value="CacheMissFrequency"/>
    </xsd:restriction>
  </xsd:simpleType>
  <xsd:simpleType name="CoherencyDirection">
    <xsd:restriction base="xsd:NCName">
      <xsd:enumeration value="_undefined_"/>
      <xsd:enumeration value="input"/>
      <xsd:enumeration value="output"/>
    </xsd:restriction>
  </xsd:simpleType>
  <xsd:simpleType name="ProcessEventType">
    <xsd:annotation>
      <xsd:documentation>The types of a process event</xsd:documentation>
    </xsd:annotation>
    <xsd:restriction base="xsd:NCName">
      <xsd:enumeration value="_all_"/>
      <xsd:enumeration value="activate"/>
      <xsd:enumeration value="deadline"/>
      <xsd:enumeration value="start"/>
      <xsd:enumeration value="resume"/>
      <xsd:enumeration value="preempt"/>
      <xsd:enumeration value="poll"/>
      <xsd:enumeration value="run"/>
      <xsd:enumeration value="wait"/>
      <xsd:enumeration value="poll_parking"/>
      <xsd:enumeration value="park"/>
      <xsd:enumeration value="release_parking"/>
      <xsd:enumeration value="release"/>
      <xsd:enumeration value="terminate"/>
    </xsd:restriction>
  </xsd:simpleType>
  <xsd:simpleType name="RunnableEventType">
    <xsd:annotation>
      <xsd:documentation>The types of a runnable event</xsd:documentation>
    </xsd:annotation>
    <xsd:restriction base="xsd:NCName">
      <xsd:enumeration value="_all_"/>
      <xsd:enumeration value="start"/>
      <xsd:enumeration value="suspend"/>
      <xsd:enumeration value="resume"/>
      <xsd:enumeration value="terminate"/>
    </xsd:restriction>
  </xsd:simpleType>
  <xsd:simpleType name="LabelEventType">
    <xsd:annotation>
      <xsd:documentation>The types of a label event</xsd:documentation>
    </xsd:annotation>
    <xsd:restriction base="xsd:NCName">
      <xsd:enumeration value="_all_"/>
      <xsd:enumeration value="read"/>
      <xsd:enumeration value="write"/>
    </xsd:restriction>
  </xsd:simpleType>
  <xsd:simpleType name="SemaphoreEventType">
    <xsd:annotation>
      <xsd:documentation>the types of a semaphore event</xsd:documentation>
    </xsd:annotation>
    <xsd:restriction base="xsd:NCName">
      <xsd:enumeration value="_all_"/>
      <xsd:enumeration value="lock"/>
      <xsd:enumeration value="unlock"/>
    </xsd:restriction>
  </xsd:simpleType>
  <xsd:simpleType name="QType">
    <xsd:restriction base="xsd:NCName">
      <xsd:enumeration value="_undefined_"/>
      <xsd:enumeration value="DYNAMIC"/>
      <xsd:enumeration value="STATIC"/>
    </xsd:restriction>
  </xsd:simpleType>
  <xsd:simpleType name="MemoryTypeEnum">
    <xsd:restriction base="xsd:NCName">
      <xsd:enumeration value="_undefined_"/>
      <xsd:enumeration value="RAM"/>
      <xsd:enumeration value="CACHE"/>
      <xsd:enumeration value="FLASH_INT"/>
      <xsd:enumeration value="FLASH_EXT"/>
    </xsd:restriction>
  </xsd:simpleType>
  <xsd:simpleType name="BusType">
    <xsd:restriction base="xsd:NCName">
      <xsd:enumeration value="_undefined_"/>
      <xsd:enumeration value="CAN"/>
      <xsd:enumeration value="TTCAN"/>
      <xsd:enumeration value="LIN"/>
      <xsd:enumeration value="FLEXRAY"/>
      <xsd:enumeration value="ETHERNET"/>
      <xsd:enumeration value="SPI"/>
      <xsd:enumeration value="NA"/>
    </xsd:restriction>
  </xsd:simpleType>
  <xsd:simpleType name="RWType">
    <xsd:restriction base="xsd:NCName">
      <xsd:enumeration value="_undefined_"/>
      <xsd:enumeration value="R"/>
      <xsd:enumeration value="W"/>
      <xsd:enumeration value="RW"/>
    </xsd:restriction>
  </xsd:simpleType>
  <xsd:simpleType name="SchedType">
    <xsd:restriction base="xsd:NCName">
      <xsd:enumeration value="_undefined_"/>
      <xsd:enumeration value="RROBIN"/>
      <xsd:enumeration value="PRIORITY"/>
    </xsd:restriction>
  </xsd:simpleType>
  <xsd:simpleType name="PinType">
    <xsd:restriction base="xsd:NCName">
      <xsd:enumeration value="_undefined_"/>
      <xsd:enumeration value="ANALOG"/>
      <xsd:enumeration value="DIGITAL"/>
    </xsd:restriction>
  </xsd:simpleType>
  <xsd:simpleType name="MemoryAddressMappingType">
    <xsd:annotation>
      <xsd:documentation>Defines how to interpret the memory addresses in this mapping model</xsd:documentation>
    </xsd:annotation>
    <xsd:restriction base="xsd:NCName">
      <xsd:enumeration value="_undefined_"/>
      <xsd:enumeration value="none"/>
      <xsd:enumeration value="address"/>
      <xsd:enumeration value="offset"/>
    </xsd:restriction>
  </xsd:simpleType>
  <xsd:simpleType name="ComparatorType">
    <xsd:restriction base="xsd:NCName">
      <xsd:enumeration value="_undefined_"/>
      <xsd:enumeration value="equal"/>
      <xsd:enumeration value="unequal"/>
      <xsd:enumeration value="greater"/>
      <xsd:enumeration value="lower"/>
    </xsd:restriction>
  </xsd:simpleType>
  <xsd:simpleType name="ConjunctionType">
    <xsd:restriction base="xsd:NCName">
      <xsd:enumeration value="_undefined_"/>
      <xsd:enumeration value="and"/>
      <xsd:enumeration value="or"/>
    </xsd:restriction>
  </xsd:simpleType>
  <xsd:simpleType name="WaitEventType">
    <xsd:restriction base="xsd:NCName">
      <xsd:enumeration value="_undefined_"/>
      <xsd:enumeration value="AND"/>
      <xsd:enumeration value="OR"/>
    </xsd:restriction>
  </xsd:simpleType>
  <xsd:simpleType name="WaitingBehaviour">
    <xsd:restriction base="xsd:NCName">
      <xsd:enumeration value="_undefined_"/>
      <xsd:enumeration value="active"/>
      <xsd:enumeration value="passive"/>
    </xsd:restriction>
  </xsd:simpleType>
  <xsd:simpleType name="AccessPrecedenceType">
    <xsd:annotation>
      <xsd:documentation>Defines the access precedence at the time of one task period.</xsd:documentation>
    </xsd:annotation>
    <xsd:restriction base="xsd:NCName">
      <xsd:enumeration value="_undefined_"/>
      <xsd:enumeration value="defaultWR">
        <xsd:annotation>
          <xsd:documentation>Writer of label has to be performed before the reader.</xsd:documentation>
        </xsd:annotation>
      </xsd:enumeration>
      <xsd:enumeration value="ignoreWR">
        <xsd:annotation>
          <xsd:documentation>Dependency between writer and reader can be ignored.</xsd:documentation>
        </xsd:annotation>
      </xsd:enumeration>
      <xsd:enumeration value="enforceRW">
        <xsd:annotation>
          <xsd:documentation>Reader of label has to be performed before the writer (delay unit of controller).</xsd:documentation>
        </xsd:annotation>
      </xsd:enumeration>
    </xsd:restriction>
  </xsd:simpleType>
  <xsd:simpleType name="OrderType">
    <xsd:restriction base="xsd:NCName">
      <xsd:enumeration value="_undefined_"/>
      <xsd:enumeration value="order">
        <xsd:annotation>
          <xsd:documentation>Defines a general order, the included elements must not follow directly</xsd:documentation>
        </xsd:annotation>
      </xsd:enumeration>
      <xsd:enumeration value="directOrder">
        <xsd:annotation>
          <xsd:documentation>The defined elements must follow directly</xsd:documentation>
        </xsd:annotation>
      </xsd:enumeration>
      <xsd:enumeration value="startSequence"/>
      <xsd:enumeration value="endSequence"/>
    </xsd:restriction>
  </xsd:simpleType>
  <xsd:simpleType name="LabelBuffering">
    <xsd:restriction base="xsd:NCName">
      <xsd:enumeration value="_undefined_"/>
      <xsd:enumeration value="buffered"/>
      <xsd:enumeration value="notBuffered"/>
    </xsd:restriction>
  </xsd:simpleType>
  <xsd:simpleType name="LabelAccessBuffering">
    <xsd:annotation>
      <xsd:documentation>Defines the buffering of a label access.
It can be buffered, not-buffered and inherited
Inherited means that the buffered-setting of the Label is used</xsd:documentation>
    </xsd:annotation>
    <xsd:restriction base="xsd:NCName">
      <xsd:enumeration value="_undefined_"/>
      <xsd:enumeration value="inherited"/>
      <xsd:enumeration value="buffered"/>
      <xsd:enumeration value="notBuffered"/>
    </xsd:restriction>
  </xsd:simpleType>
  <xsd:simpleType name="LabelAccessEnum">
    <xsd:restriction base="xsd:NCName">
      <xsd:enumeration value="_undefined_"/>
      <xsd:enumeration value="read"/>
      <xsd:enumeration value="write"/>
    </xsd:restriction>
  </xsd:simpleType>
  <xsd:simpleType name="SemaphoreAccessEnum">
    <xsd:annotation>
      <xsd:documentation>request: requests access to semaphore
release: release accessed semaphore
exclusive: gets access to requested semaphore only when there is no other user accessing it</xsd:documentation>
    </xsd:annotation>
    <xsd:restriction base="xsd:NCName">
      <xsd:enumeration value="_undefined_"/>
      <xsd:enumeration value="request"/>
      <xsd:enumeration value="exclusive"/>
      <xsd:enumeration value="release"/>
    </xsd:restriction>
  </xsd:simpleType>
  <xsd:simpleType name="Preemption">
    <xsd:annotation>
      <xsd:documentation>Preemption type for scheduling</xsd:documentation>
    </xsd:annotation>
    <xsd:restriction base="xsd:NCName">
      <xsd:enumeration value="_undefined_"/>
      <xsd:enumeration value="cooperative"/>
      <xsd:enumeration value="preemptive"/>
      <xsd:enumeration value="unknown"/>
    </xsd:restriction>
  </xsd:simpleType>
  <xsd:simpleType name="ConcurrencyType">
    <xsd:annotation>
      <xsd:documentation>Concurrency type of an entity</xsd:documentation>
    </xsd:annotation>
    <xsd:restriction base="xsd:NCName">
      <xsd:enumeration value="_undefined_"/>
      <xsd:enumeration value="SingleCoreSafe">
        <xsd:annotation>
          <xsd:documentation>Safe for access inside of the same core</xsd:documentation>
        </xsd:annotation>
      </xsd:enumeration>
      <xsd:enumeration value="MultiCoreSafe">
        <xsd:annotation>
          <xsd:documentation>Safe for access from another core</xsd:documentation>
        </xsd:annotation>
      </xsd:enumeration>
      <xsd:enumeration value="SingleCorePrioSafe"/>
    </xsd:restriction>
  </xsd:simpleType>
  <xsd:complexType name="Amalthea">
    <xsd:annotation>
      <xsd:documentation>*
===============================================================================
===============================================================================

								Central Model

===============================================================================
===============================================================================</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="am:BaseObject">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="swModel" type="am:SWModel"/>
          <xsd:element name="hwModel" type="am:HWModel"/>
          <xsd:element name="osModel" type="am:OSModel"/>
          <xsd:element name="stimuliModel" type="am:StimuliModel"/>
          <xsd:element name="constraintsModel" type="am:ConstraintsModel"/>
          <xsd:element name="eventModel" type="am:EventModel"/>
          <xsd:element name="propertyConstraintsModel" type="am:PropertyConstraintsModel"/>
          <xsd:element name="mappingModel" type="am:MappingModel"/>
          <xsd:element name="configModel" type="am:ConfigModel"/>
          <xsd:element name="componentsModel" type="am:ComponentsModel"/>
        </xsd:choice>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="Amalthea" type="am:Amalthea">
    <xsd:annotation>
      <xsd:documentation>*
===============================================================================
===============================================================================

								Central Model

===============================================================================
===============================================================================</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType abstract="true" name="BaseObject">
    <xsd:annotation>
      <xsd:documentation>*
===============================================================================
===============================================================================

								Common Model

===============================================================================
===============================================================================</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="am:IAnnotatable"/>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="BaseObject" type="am:BaseObject">
    <xsd:annotation>
      <xsd:documentation>*
===============================================================================
===============================================================================

								Common Model

===============================================================================
===============================================================================</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType abstract="true" name="ReferableObject">
    <xsd:complexContent>
      <xsd:extension base="am:IReferable"/>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="ReferableObject" type="am:ReferableObject"/>
  <xsd:complexType abstract="true" name="ReferableBaseObject">
    <xsd:complexContent>
      <xsd:extension base="am:IAnnotatable">
        <xsd:attribute name="name" type="xsd:string"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="ReferableBaseObject" type="am:ReferableBaseObject"/>
  <xsd:complexType abstract="true" name="IAnnotatable">
    <xsd:annotation>
      <xsd:documentation>IAnnotatable: Possibility to store custom properties on elements</xsd:documentation>
    </xsd:annotation>
    <xsd:choice maxOccurs="unbounded" minOccurs="0">
      <xsd:element name="customProperties" type="am:CustomProperty"/>
      <xsd:element ref="xmi:Extension"/>
    </xsd:choice>
    <xsd:attribute ref="xmi:id"/>
    <xsd:attributeGroup ref="xmi:ObjectAttribs"/>
  </xsd:complexType>
  <xsd:element name="IAnnotatable" type="am:IAnnotatable">
    <xsd:annotation>
      <xsd:documentation>IAnnotatable: Possibility to store custom properties on elements</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType abstract="true" name="ITaggable">
    <xsd:annotation>
      <xsd:documentation>ITaggable: Possibility to add tags to an elements</xsd:documentation>
    </xsd:annotation>
    <xsd:choice maxOccurs="unbounded" minOccurs="0">
      <xsd:element name="tags" type="am:Tag"/>
      <xsd:element ref="xmi:Extension"/>
    </xsd:choice>
    <xsd:attribute ref="xmi:id"/>
    <xsd:attributeGroup ref="xmi:ObjectAttribs"/>
    <xsd:attribute name="tags" type="xsd:string"/>
  </xsd:complexType>
  <xsd:element name="ITaggable" type="am:ITaggable">
    <xsd:annotation>
      <xsd:documentation>ITaggable: Possibility to add tags to an elements</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType abstract="true" name="IReferable">
    <xsd:annotation>
      <xsd:documentation>IReferable: Name attribute and computed ID for name based references</xsd:documentation>
    </xsd:annotation>
    <xsd:choice maxOccurs="unbounded" minOccurs="0">
      <xsd:element ref="xmi:Extension"/>
    </xsd:choice>
    <xsd:attribute ref="xmi:id"/>
    <xsd:attributeGroup ref="xmi:ObjectAttribs"/>
    <xsd:attribute name="name" type="xsd:string"/>
  </xsd:complexType>
  <xsd:element name="IReferable" type="am:IReferable">
    <xsd:annotation>
      <xsd:documentation>IReferable: Name attribute and computed ID for name based references</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="Tag">
    <xsd:annotation>
      <xsd:documentation>A tag for processes, runnables, events and labels</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="am:ReferableBaseObject">
        <xsd:attribute name="tagType" type="xsd:string"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="Tag" type="am:Tag">
    <xsd:annotation>
      <xsd:documentation>A tag for processes, runnables, events and labels</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType abstract="true" name="AbstractTime">
    <xsd:choice maxOccurs="unbounded" minOccurs="0">
      <xsd:element ref="xmi:Extension"/>
    </xsd:choice>
    <xsd:attribute ref="xmi:id"/>
    <xsd:attributeGroup ref="xmi:ObjectAttribs"/>
    <xsd:attribute name="value" type="xsd:int"/>
    <xsd:attribute name="unit" type="am:TimeUnit"/>
  </xsd:complexType>
  <xsd:element name="AbstractTime" type="am:AbstractTime"/>
  <xsd:complexType name="Time">
    <xsd:annotation>
      <xsd:documentation>General time class to use including value and given time unit.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="am:AbstractTime"/>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="Time" type="am:Time">
    <xsd:annotation>
      <xsd:documentation>General time class to use including value and given time unit.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="SignedTime">
    <xsd:annotation>
      <xsd:documentation>Like the general time class but it is explicit allows to define negative time values</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="am:AbstractTime"/>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="SignedTime" type="am:SignedTime">
    <xsd:annotation>
      <xsd:documentation>Like the general time class but it is explicit allows to define negative time values</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="Frequency">
    <xsd:annotation>
      <xsd:documentation>General frequency class to define a frequency value</xsd:documentation>
    </xsd:annotation>
    <xsd:choice maxOccurs="unbounded" minOccurs="0">
      <xsd:element ref="xmi:Extension"/>
    </xsd:choice>
    <xsd:attribute ref="xmi:id"/>
    <xsd:attributeGroup ref="xmi:ObjectAttribs"/>
    <xsd:attribute name="unit" type="am:FrequencyUnit"/>
    <xsd:attribute name="value" type="xsd:double"/>
  </xsd:complexType>
  <xsd:element name="Frequency" type="am:Frequency">
    <xsd:annotation>
      <xsd:documentation>General frequency class to define a frequency value</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="DataUnit">
    <xsd:annotation>
      <xsd:documentation>Representing size of data in bits / bytes.</xsd:documentation>
    </xsd:annotation>
    <xsd:choice maxOccurs="unbounded" minOccurs="0">
      <xsd:element ref="xmi:Extension"/>
    </xsd:choice>
    <xsd:attribute ref="xmi:id"/>
    <xsd:attributeGroup ref="xmi:ObjectAttribs"/>
    <xsd:attribute name="numberBits" type="xsd:int">
      <xsd:annotation>
        <xsd:documentation>Size of the data in bit</xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
  </xsd:complexType>
  <xsd:element name="DataUnit" type="am:DataUnit">
    <xsd:annotation>
      <xsd:documentation>Representing size of data in bits / bytes.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="CustomProperty">
    <xsd:annotation>
      <xsd:documentation>custom property container for map</xsd:documentation>
    </xsd:annotation>
    <xsd:choice maxOccurs="unbounded" minOccurs="0">
      <xsd:element name="value" type="am:Value"/>
      <xsd:element ref="xmi:Extension"/>
    </xsd:choice>
    <xsd:attribute ref="xmi:id"/>
    <xsd:attributeGroup ref="xmi:ObjectAttribs"/>
    <xsd:attribute name="key" type="xsd:string" use="required"/>
  </xsd:complexType>
  <xsd:element name="CustomProperty" type="am:CustomProperty">
    <xsd:annotation>
      <xsd:documentation>custom property container for map</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType abstract="true" name="Value">
    <xsd:annotation>
      <xsd:documentation>Abstract generalization of a value entry.</xsd:documentation>
    </xsd:annotation>
    <xsd:choice maxOccurs="unbounded" minOccurs="0">
      <xsd:element ref="xmi:Extension"/>
    </xsd:choice>
    <xsd:attribute ref="xmi:id"/>
    <xsd:attributeGroup ref="xmi:ObjectAttribs"/>
  </xsd:complexType>
  <xsd:element name="Value" type="am:Value">
    <xsd:annotation>
      <xsd:documentation>Abstract generalization of a value entry.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="ListObject">
    <xsd:complexContent>
      <xsd:extension base="am:Value">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="values" type="am:Value"/>
        </xsd:choice>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="ListObject" type="am:ListObject"/>
  <xsd:complexType name="StringObject">
    <xsd:annotation>
      <xsd:documentation>Object for using the elementary datatype String as generic parameter</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="am:Value">
        <xsd:attribute name="value" type="xsd:string" use="required"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="StringObject" type="am:StringObject">
    <xsd:annotation>
      <xsd:documentation>Object for using the elementary datatype String as generic parameter</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="ReferenceObject">
    <xsd:annotation>
      <xsd:documentation>Object for using object reference as generic parameter</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="am:Value">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="value" type="am:IReferable"/>
        </xsd:choice>
        <xsd:attribute name="value" type="xsd:string"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="ReferenceObject" type="am:ReferenceObject">
    <xsd:annotation>
      <xsd:documentation>Object for using object reference as generic parameter</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="IntegerObject">
    <xsd:annotation>
      <xsd:documentation>Object for using the elementary datatype integer as generic parameter</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="am:Value">
        <xsd:attribute name="value" type="xsd:int" use="required"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="IntegerObject" type="am:IntegerObject">
    <xsd:annotation>
      <xsd:documentation>Object for using the elementary datatype integer as generic parameter</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="LongObject">
    <xsd:annotation>
      <xsd:documentation>Object for using the elementary datatype long as generic parameter</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="am:Value">
        <xsd:attribute name="value" type="xsd:long" use="required"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="LongObject" type="am:LongObject">
    <xsd:annotation>
      <xsd:documentation>Object for using the elementary datatype long as generic parameter</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="FloatObject">
    <xsd:annotation>
      <xsd:documentation>Object for using the elementary datatype float as generic parameter</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="am:Value">
        <xsd:attribute name="value" type="xsd:float" use="required"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="FloatObject" type="am:FloatObject">
    <xsd:annotation>
      <xsd:documentation>Object for using the elementary datatype float as generic parameter</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="DoubleObject">
    <xsd:annotation>
      <xsd:documentation>Object for using the elementary datatype double as generic parameter</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="am:Value">
        <xsd:attribute name="value" type="xsd:double" use="required"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="DoubleObject" type="am:DoubleObject">
    <xsd:annotation>
      <xsd:documentation>Object for using the elementary datatype double as generic parameter</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="BooleanObject">
    <xsd:annotation>
      <xsd:documentation>Object for using the elementary datatype boolean as generic parameter</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="am:Value">
        <xsd:attribute name="value" type="xsd:boolean" use="required"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="BooleanObject" type="am:BooleanObject">
    <xsd:annotation>
      <xsd:documentation>Object for using the elementary datatype boolean as generic parameter</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="TimeObject">
    <xsd:complexContent>
      <xsd:extension base="am:AbstractTime"/>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="TimeObject" type="am:TimeObject"/>
  <xsd:complexType name="SignedTimeObject">
    <xsd:complexContent>
      <xsd:extension base="am:AbstractTime"/>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="SignedTimeObject" type="am:SignedTimeObject"/>
  <xsd:complexType name="Deviation">
    <xsd:choice maxOccurs="unbounded" minOccurs="0">
      <xsd:element name="lowerBound" type="ecore:EObject"/>
      <xsd:element name="upperBound" type="ecore:EObject"/>
      <xsd:element name="distribution" type="am:Distribution"/>
      <xsd:element ref="xmi:Extension"/>
    </xsd:choice>
    <xsd:attribute ref="xmi:id"/>
    <xsd:attributeGroup ref="xmi:ObjectAttribs"/>
  </xsd:complexType>
  <xsd:element name="Deviation" type="am:Deviation"/>
  <xsd:complexType abstract="true" name="Distribution">
    <xsd:annotation>
      <xsd:documentation>Abstract generic distribution class
The generic class T defines the data-type of the value-range of the distribution</xsd:documentation>
    </xsd:annotation>
    <xsd:choice maxOccurs="unbounded" minOccurs="0">
      <xsd:element ref="xmi:Extension"/>
    </xsd:choice>
    <xsd:attribute ref="xmi:id"/>
    <xsd:attributeGroup ref="xmi:ObjectAttribs"/>
  </xsd:complexType>
  <xsd:element name="Distribution" type="am:Distribution">
    <xsd:annotation>
      <xsd:documentation>Abstract generic distribution class
The generic class T defines the data-type of the value-range of the distribution</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType abstract="true" name="WeibullDistribution">
    <xsd:annotation>
      <xsd:documentation>Abstract weibull distribution</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="am:Distribution"/>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="WeibullDistribution" type="am:WeibullDistribution">
    <xsd:annotation>
      <xsd:documentation>Abstract weibull distribution</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="WeibullParameters">
    <xsd:annotation>
      <xsd:documentation>Weibull Distribution
Starts from zero, upperBound limits maximum value of result</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="am:WeibullDistribution">
        <xsd:attribute name="kappa" type="xsd:double"/>
        <xsd:attribute name="lambda" type="xsd:double"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="WeibullParameters" type="am:WeibullParameters">
    <xsd:annotation>
      <xsd:documentation>Weibull Distribution
Starts from zero, upperBound limits maximum value of result</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="WeibullEstimators">
    <xsd:annotation>
      <xsd:documentation>Weibull Distribution
The parameter of a weibull distribution (kappa, lambda...) are calculated from the estimators minimum, maximum and average.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="am:WeibullDistribution">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="mean" type="ecore:EObject"/>
        </xsd:choice>
        <xsd:attribute name="pRemainPromille" type="xsd:double"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="WeibullEstimators" type="am:WeibullEstimators">
    <xsd:annotation>
      <xsd:documentation>Weibull Distribution
The parameter of a weibull distribution (kappa, lambda...) are calculated from the estimators minimum, maximum and average.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="UniformDistribution">
    <xsd:annotation>
      <xsd:documentation>Continuous uniform distribution</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="am:Distribution"/>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="UniformDistribution" type="am:UniformDistribution">
    <xsd:annotation>
      <xsd:documentation>Continuous uniform distribution</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="Boundaries">
    <xsd:annotation>
      <xsd:documentation>Defines the upper and lower bounds of a value interval without defining the distribution</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="am:Distribution"/>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="Boundaries" type="am:Boundaries">
    <xsd:annotation>
      <xsd:documentation>Defines the upper and lower bounds of a value interval without defining the distribution</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="GaussDistribution">
    <xsd:annotation>
      <xsd:documentation>Gauss distribution</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="am:Distribution">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="sd" type="ecore:EObject"/>
          <xsd:element name="mean" type="ecore:EObject"/>
        </xsd:choice>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="GaussDistribution" type="am:GaussDistribution">
    <xsd:annotation>
      <xsd:documentation>Gauss distribution</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType abstract="true" name="NumericStatistic">
    <xsd:choice maxOccurs="unbounded" minOccurs="0">
      <xsd:element ref="xmi:Extension"/>
    </xsd:choice>
    <xsd:attribute ref="xmi:id"/>
    <xsd:attributeGroup ref="xmi:ObjectAttribs"/>
  </xsd:complexType>
  <xsd:element name="NumericStatistic" type="am:NumericStatistic"/>
  <xsd:complexType name="MinAvgMaxStatistic">
    <xsd:annotation>
      <xsd:documentation>Statistic to provide capabilities for min, max and avg</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="am:NumericStatistic">
        <xsd:attribute name="min" type="xsd:int"/>
        <xsd:attribute name="avg" type="xsd:int"/>
        <xsd:attribute name="max" type="xsd:int"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="MinAvgMaxStatistic" type="am:MinAvgMaxStatistic">
    <xsd:annotation>
      <xsd:documentation>Statistic to provide capabilities for min, max and avg</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="SingleValueStatistic">
    <xsd:complexContent>
      <xsd:extension base="am:NumericStatistic">
        <xsd:attribute name="value" type="xsd:float"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="SingleValueStatistic" type="am:SingleValueStatistic"/>
  <xsd:complexType name="Mode">
    <xsd:annotation>
      <xsd:documentation>Modes</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="am:ReferableBaseObject">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="literals" type="am:ModeLiteral"/>
        </xsd:choice>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="Mode" type="am:Mode">
    <xsd:annotation>
      <xsd:documentation>Modes</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="ModeLiteral">
    <xsd:complexContent>
      <xsd:extension base="am:ReferableBaseObject"/>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="ModeLiteral" type="am:ModeLiteral"/>
  <xsd:complexType abstract="true" name="ModeValueProvider">
    <xsd:complexContent>
      <xsd:extension base="am:IAnnotatable">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="mode" type="am:Mode"/>
          <xsd:element name="initialValue" type="am:ModeLiteral"/>
        </xsd:choice>
        <xsd:attribute name="name" type="xsd:string"/>
        <xsd:attribute name="mode" type="xsd:string"/>
        <xsd:attribute name="initialValue" type="xsd:string"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="ModeValueProvider" type="am:ModeValueProvider"/>
  <xsd:complexType name="ComponentsModel">
    <xsd:annotation>
      <xsd:documentation>*
===============================================================================
===============================================================================

								Components Model

===============================================================================
===============================================================================</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="am:BaseObject">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="tags" type="am:Tag"/>
          <xsd:element name="components" type="am:Component"/>
          <xsd:element name="systems" type="am:System"/>
        </xsd:choice>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="ComponentsModel" type="am:ComponentsModel">
    <xsd:annotation>
      <xsd:documentation>*
===============================================================================
===============================================================================

								Components Model

===============================================================================
===============================================================================</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType abstract="true" name="INamedElement">
    <xsd:choice maxOccurs="unbounded" minOccurs="0">
      <xsd:element ref="xmi:Extension"/>
    </xsd:choice>
    <xsd:attribute ref="xmi:id"/>
    <xsd:attributeGroup ref="xmi:ObjectAttribs"/>
    <xsd:attribute name="name" type="xsd:string"/>
  </xsd:complexType>
  <xsd:element name="INamedElement" type="am:INamedElement"/>
  <xsd:complexType abstract="true" name="ISystem">
    <xsd:choice maxOccurs="unbounded" minOccurs="0">
      <xsd:element name="componentInstances" type="am:ComponentInstance"/>
      <xsd:element name="connectors" type="am:Connector"/>
      <xsd:element ref="xmi:Extension"/>
    </xsd:choice>
    <xsd:attribute ref="xmi:id"/>
    <xsd:attributeGroup ref="xmi:ObjectAttribs"/>
  </xsd:complexType>
  <xsd:element name="ISystem" type="am:ISystem"/>
  <xsd:complexType abstract="true" name="Port">
    <xsd:complexContent>
      <xsd:extension base="am:ReferableBaseObject">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="tags" type="am:Tag"/>
        </xsd:choice>
        <xsd:attribute name="tags" type="xsd:string"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="Port" type="am:Port"/>
  <xsd:complexType name="Component">
    <xsd:complexContent>
      <xsd:extension base="am:ReferableBaseObject">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="tags" type="am:Tag"/>
          <xsd:element name="ports" type="am:Port"/>
          <xsd:element name="tasks" type="am:AbstractProcess"/>
          <xsd:element name="runnables" type="am:Runnable"/>
          <xsd:element name="labels" type="am:Label"/>
          <xsd:element name="semaphores" type="am:Semaphore"/>
          <xsd:element name="osEvents" type="am:OsEvent"/>
        </xsd:choice>
        <xsd:attribute name="tags" type="xsd:string"/>
        <xsd:attribute name="tasks" type="xsd:string"/>
        <xsd:attribute name="runnables" type="xsd:string"/>
        <xsd:attribute name="labels" type="xsd:string"/>
        <xsd:attribute name="semaphores" type="xsd:string"/>
        <xsd:attribute name="osEvents" type="xsd:string"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="Component" type="am:Component"/>
  <xsd:complexType name="Composite">
    <xsd:complexContent>
      <xsd:extension base="am:Component">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="componentInstances" type="am:ComponentInstance"/>
          <xsd:element name="connectors" type="am:Connector"/>
        </xsd:choice>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="Composite" type="am:Composite"/>
  <xsd:complexType name="System">
    <xsd:complexContent>
      <xsd:extension base="am:ReferableBaseObject">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="tags" type="am:Tag"/>
          <xsd:element name="componentInstances" type="am:ComponentInstance"/>
          <xsd:element name="connectors" type="am:Connector"/>
        </xsd:choice>
        <xsd:attribute name="tags" type="xsd:string"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="System" type="am:System"/>
  <xsd:complexType name="ComponentInstance">
    <xsd:complexContent>
      <xsd:extension base="am:ReferableBaseObject">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="tags" type="am:Tag"/>
          <xsd:element name="type" type="am:Component"/>
        </xsd:choice>
        <xsd:attribute name="tags" type="xsd:string"/>
        <xsd:attribute name="type" type="xsd:string"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="ComponentInstance" type="am:ComponentInstance"/>
  <xsd:complexType name="Connector">
    <xsd:complexContent>
      <xsd:extension base="am:BaseObject">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="tags" type="am:Tag"/>
          <xsd:element name="sourcePort" type="am:QualifiedPort"/>
          <xsd:element name="targetPort" type="am:QualifiedPort"/>
        </xsd:choice>
        <xsd:attribute name="name" type="xsd:string"/>
        <xsd:attribute name="tags" type="xsd:string"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="Connector" type="am:Connector"/>
  <xsd:complexType name="QualifiedPort">
    <xsd:complexContent>
      <xsd:extension base="am:BaseObject">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="instance" type="am:ComponentInstance"/>
          <xsd:element name="port" type="am:Port"/>
        </xsd:choice>
        <xsd:attribute name="instance" type="xsd:string"/>
        <xsd:attribute name="port" type="xsd:string"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="QualifiedPort" type="am:QualifiedPort"/>
  <xsd:complexType name="FInterfacePort">
    <xsd:complexContent>
      <xsd:extension base="am:Port">
        <xsd:attribute name="kind" type="am:InterfaceKind"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="FInterfacePort" type="am:FInterfacePort"/>
  <xsd:complexType name="ConfigModel">
    <xsd:annotation>
      <xsd:documentation>*
===============================================================================
===============================================================================

								Config Model

===============================================================================
===============================================================================</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="am:BaseObject">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="eventsToTrace" type="am:EventConfig"/>
        </xsd:choice>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="ConfigModel" type="am:ConfigModel">
    <xsd:annotation>
      <xsd:documentation>*
===============================================================================
===============================================================================

								Config Model

===============================================================================
===============================================================================</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType abstract="true" name="EventConfig">
    <xsd:complexContent>
      <xsd:extension base="am:BaseObject">
        <xsd:attribute name="name" type="xsd:string"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="EventConfig" type="am:EventConfig"/>
  <xsd:complexType name="EventConfigLink">
    <xsd:complexContent>
      <xsd:extension base="am:EventConfig">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="event" type="am:EntityEvent"/>
        </xsd:choice>
        <xsd:attribute name="event" type="xsd:string"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="EventConfigLink" type="am:EventConfigLink"/>
  <xsd:complexType name="EventConfigElement">
    <xsd:complexContent>
      <xsd:extension base="am:EventConfig">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="event" type="am:EntityEvent"/>
        </xsd:choice>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="EventConfigElement" type="am:EventConfigElement"/>
  <xsd:complexType name="ConstraintsModel">
    <xsd:annotation>
      <xsd:documentation>*
===============================================================================
===============================================================================

								Constraints Model

===============================================================================
===============================================================================</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="am:BaseObject">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="eventChains" type="am:EventChain"/>
          <xsd:element name="timingConstraints" type="am:TimingConstraint"/>
          <xsd:element name="affinityConstraints" type="am:AffinityConstraint"/>
          <xsd:element name="runnableSequencingConstraints" type="am:RunnableSequencingConstraint"/>
          <xsd:element name="dataAgeConstraints" type="am:DataAgeConstraint"/>
          <xsd:element name="requirements" type="am:Requirement"/>
          <xsd:element name="dataCoherencyGroups" type="am:DataCoherencyGroup"/>
        </xsd:choice>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="ConstraintsModel" type="am:ConstraintsModel">
    <xsd:annotation>
      <xsd:documentation>*
===============================================================================
===============================================================================

								Constraints Model

===============================================================================
===============================================================================</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="RunnableSequencingConstraint">
    <xsd:complexContent>
      <xsd:extension base="am:ReferableBaseObject">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="runnableGroups" type="am:ProcessRunnableGroup"/>
        </xsd:choice>
        <xsd:attribute name="orderType" type="am:RunnableOrderType"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="RunnableSequencingConstraint" type="am:RunnableSequencingConstraint"/>
  <xsd:complexType name="ProcessRunnableGroup">
    <xsd:complexContent>
      <xsd:extension base="am:BaseObject">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="entries" type="am:ProcessRunnableGroupEntry"/>
        </xsd:choice>
        <xsd:attribute name="groupingType" type="am:RunnableGroupingType"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="ProcessRunnableGroup" type="am:ProcessRunnableGroup"/>
  <xsd:complexType name="ProcessRunnableGroupEntry">
    <xsd:complexContent>
      <xsd:extension base="am:BaseObject">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="runnable" type="am:Runnable"/>
          <xsd:element name="processScope" type="am:AbstractProcess"/>
        </xsd:choice>
        <xsd:attribute name="runnable" type="xsd:string"/>
        <xsd:attribute name="processScope" type="xsd:string"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="ProcessRunnableGroupEntry" type="am:ProcessRunnableGroupEntry"/>
  <xsd:complexType abstract="true" name="AffinityConstraint">
    <xsd:complexContent>
      <xsd:extension base="am:ReferableBaseObject"/>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="AffinityConstraint" type="am:AffinityConstraint"/>
  <xsd:complexType abstract="true" name="SeparationConstraint">
    <xsd:annotation>
      <xsd:documentation>A abstract superclass for all separation constraints</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="am:AffinityConstraint"/>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="SeparationConstraint" type="am:SeparationConstraint">
    <xsd:annotation>
      <xsd:documentation>A abstract superclass for all separation constraints</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType abstract="true" name="PairingConstraint">
    <xsd:annotation>
      <xsd:documentation>A abstract superclass for all pairing constraints</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="am:AffinityConstraint"/>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="PairingConstraint" type="am:PairingConstraint">
    <xsd:annotation>
      <xsd:documentation>A abstract superclass for all pairing constraints</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType abstract="true" name="ProcessConstraint">
    <xsd:annotation>
      <xsd:documentation>A abstract superclass for all process related constraint
The target describes the entity on which the processes can be mapped</xsd:documentation>
    </xsd:annotation>
    <xsd:choice maxOccurs="unbounded" minOccurs="0">
      <xsd:element name="target" type="am:ProcessConstraintTarget"/>
      <xsd:element ref="xmi:Extension"/>
    </xsd:choice>
    <xsd:attribute ref="xmi:id"/>
    <xsd:attributeGroup ref="xmi:ObjectAttribs"/>
  </xsd:complexType>
  <xsd:element name="ProcessConstraint" type="am:ProcessConstraint">
    <xsd:annotation>
      <xsd:documentation>A abstract superclass for all process related constraint
The target describes the entity on which the processes can be mapped</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType abstract="true" name="RunnableConstraint">
    <xsd:annotation>
      <xsd:documentation>A abstract superclass for all runnable related constraint
The target describes the entity on which the runnables can be mapped</xsd:documentation>
    </xsd:annotation>
    <xsd:choice maxOccurs="unbounded" minOccurs="0">
      <xsd:element name="target" type="am:RunnableConstraintTarget"/>
      <xsd:element ref="xmi:Extension"/>
    </xsd:choice>
    <xsd:attribute ref="xmi:id"/>
    <xsd:attributeGroup ref="xmi:ObjectAttribs"/>
  </xsd:complexType>
  <xsd:element name="RunnableConstraint" type="am:RunnableConstraint">
    <xsd:annotation>
      <xsd:documentation>A abstract superclass for all runnable related constraint
The target describes the entity on which the runnables can be mapped</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType abstract="true" name="SchedulerConstraint">
    <xsd:annotation>
      <xsd:documentation>A abstract superclass for all scheduler related constraint
The target describes the entity on which the schedulers can be mapped</xsd:documentation>
    </xsd:annotation>
    <xsd:choice maxOccurs="unbounded" minOccurs="0">
      <xsd:element name="target" type="am:SchedulerConstraintTarget"/>
      <xsd:element ref="xmi:Extension"/>
    </xsd:choice>
    <xsd:attribute ref="xmi:id"/>
    <xsd:attributeGroup ref="xmi:ObjectAttribs"/>
  </xsd:complexType>
  <xsd:element name="SchedulerConstraint" type="am:SchedulerConstraint">
    <xsd:annotation>
      <xsd:documentation>A abstract superclass for all scheduler related constraint
The target describes the entity on which the schedulers can be mapped</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="RunnableSeparationConstraint">
    <xsd:annotation>
      <xsd:documentation>A runnable-separation-constraint
groups describes the runnable-groups that should be separated from each other on the target
if there is only one group then this means that the runnables of this group are not allowed to be executed on the target</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="am:SeparationConstraint">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="target" type="am:RunnableConstraintTarget"/>
          <xsd:element name="groups" type="am:RunnableGroup"/>
        </xsd:choice>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="RunnableSeparationConstraint" type="am:RunnableSeparationConstraint">
    <xsd:annotation>
      <xsd:documentation>A runnable-separation-constraint
groups describes the runnable-groups that should be separated from each other on the target
if there is only one group then this means that the runnables of this group are not allowed to be executed on the target</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="ProcessSeparationConstraint">
    <xsd:annotation>
      <xsd:documentation>A process-separation-constraint
groups describes the process-groups that should be separated from each other on the target
if there is only one group then this means that the processes of this group are not allowed to be executed on the target</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="am:SeparationConstraint">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="target" type="am:ProcessConstraintTarget"/>
          <xsd:element name="groups" type="am:ProcessGroup"/>
        </xsd:choice>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="ProcessSeparationConstraint" type="am:ProcessSeparationConstraint">
    <xsd:annotation>
      <xsd:documentation>A process-separation-constraint
groups describes the process-groups that should be separated from each other on the target
if there is only one group then this means that the processes of this group are not allowed to be executed on the target</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="SchedulerSeparationConstraint">
    <xsd:annotation>
      <xsd:documentation>A scheduler-separation-constraint
groups describes the scheduler-groups that should be separated from each other on the target
if there is only one group then this means that the schedulers of this group are not allowed to be executed on the target</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="am:SeparationConstraint">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="target" type="am:SchedulerConstraintTarget"/>
          <xsd:element name="groups" type="am:SchedulerEntityGroup"/>
        </xsd:choice>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="SchedulerSeparationConstraint" type="am:SchedulerSeparationConstraint">
    <xsd:annotation>
      <xsd:documentation>A scheduler-separation-constraint
groups describes the scheduler-groups that should be separated from each other on the target
if there is only one group then this means that the schedulers of this group are not allowed to be executed on the target</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="RunnablePairingConstraint">
    <xsd:annotation>
      <xsd:documentation>A runnable-pairing-constraint
runnables describes the group of runnables that should be paired on the target</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="am:PairingConstraint">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="target" type="am:RunnableConstraintTarget"/>
          <xsd:element name="runnables" type="am:RunnableGroup"/>
        </xsd:choice>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="RunnablePairingConstraint" type="am:RunnablePairingConstraint">
    <xsd:annotation>
      <xsd:documentation>A runnable-pairing-constraint
runnables describes the group of runnables that should be paired on the target</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="ProcessPairingConstraint">
    <xsd:annotation>
      <xsd:documentation>A process-pairing-constraint
processes describes the group of processes that should be paired on the target</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="am:PairingConstraint">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="target" type="am:ProcessConstraintTarget"/>
          <xsd:element name="processes" type="am:ProcessGroup"/>
        </xsd:choice>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="ProcessPairingConstraint" type="am:ProcessPairingConstraint">
    <xsd:annotation>
      <xsd:documentation>A process-pairing-constraint
processes describes the group of processes that should be paired on the target</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="SchedulerPairingConstraint">
    <xsd:annotation>
      <xsd:documentation>A scheduler-pairing-constraint
schedulers describes the group of schedulers that should be paired on the target</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="am:PairingConstraint">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="target" type="am:SchedulerConstraintTarget"/>
          <xsd:element name="schedulers" type="am:SchedulerEntityGroup"/>
        </xsd:choice>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="SchedulerPairingConstraint" type="am:SchedulerPairingConstraint">
    <xsd:annotation>
      <xsd:documentation>A scheduler-pairing-constraint
schedulers describes the group of schedulers that should be paired on the target</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType abstract="true" name="RunnableConstraintTarget">
    <xsd:annotation>
      <xsd:documentation>A abstract superclass for all possible targets for runnable-constraints</xsd:documentation>
    </xsd:annotation>
    <xsd:choice maxOccurs="unbounded" minOccurs="0">
      <xsd:element ref="xmi:Extension"/>
    </xsd:choice>
    <xsd:attribute ref="xmi:id"/>
    <xsd:attributeGroup ref="xmi:ObjectAttribs"/>
  </xsd:complexType>
  <xsd:element name="RunnableConstraintTarget" type="am:RunnableConstraintTarget">
    <xsd:annotation>
      <xsd:documentation>A abstract superclass for all possible targets for runnable-constraints</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType abstract="true" name="ProcessConstraintTarget">
    <xsd:annotation>
      <xsd:documentation>A abstract superclass for all possible targets for process-constraints</xsd:documentation>
    </xsd:annotation>
    <xsd:choice maxOccurs="unbounded" minOccurs="0">
      <xsd:element ref="xmi:Extension"/>
    </xsd:choice>
    <xsd:attribute ref="xmi:id"/>
    <xsd:attributeGroup ref="xmi:ObjectAttribs"/>
  </xsd:complexType>
  <xsd:element name="ProcessConstraintTarget" type="am:ProcessConstraintTarget">
    <xsd:annotation>
      <xsd:documentation>A abstract superclass for all possible targets for process-constraints</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType abstract="true" name="SchedulerConstraintTarget">
    <xsd:annotation>
      <xsd:documentation>A abstract superclass for all possible targets for scheduler-constraints</xsd:documentation>
    </xsd:annotation>
    <xsd:choice maxOccurs="unbounded" minOccurs="0">
      <xsd:element ref="xmi:Extension"/>
    </xsd:choice>
    <xsd:attribute ref="xmi:id"/>
    <xsd:attributeGroup ref="xmi:ObjectAttribs"/>
  </xsd:complexType>
  <xsd:element name="SchedulerConstraintTarget" type="am:SchedulerConstraintTarget">
    <xsd:annotation>
      <xsd:documentation>A abstract superclass for all possible targets for scheduler-constraints</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="TargetCore">
    <xsd:annotation>
      <xsd:documentation>A core target description
A core can be a target for runnable-constraints, process-constraints and scheduler-constraints
cores: the reference to zero or more Cores. If this list is empty, the target stands for all cores!</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="am:RunnableConstraintTarget">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="customProperties" type="am:CustomProperty"/>
          <xsd:element name="cores" type="am:Core"/>
        </xsd:choice>
        <xsd:attribute name="cores" type="xsd:string"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="TargetCore" type="am:TargetCore">
    <xsd:annotation>
      <xsd:documentation>A core target description
A core can be a target for runnable-constraints, process-constraints and scheduler-constraints
cores: the reference to zero or more Cores. If this list is empty, the target stands for all cores!</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="TargetScheduler">
    <xsd:annotation>
      <xsd:documentation>A scheduler target description
A scheduler can be a target for runnable-constraints and process-constraints
schedulers: the reference to zero or more Schedulers. If this list is empty, the target stands for all schedulers!</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="am:RunnableConstraintTarget">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="customProperties" type="am:CustomProperty"/>
          <xsd:element name="schedulers" type="am:Scheduler"/>
        </xsd:choice>
        <xsd:attribute name="schedulers" type="xsd:string"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="TargetScheduler" type="am:TargetScheduler">
    <xsd:annotation>
      <xsd:documentation>A scheduler target description
A scheduler can be a target for runnable-constraints and process-constraints
schedulers: the reference to zero or more Schedulers. If this list is empty, the target stands for all schedulers!</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="TargetProcess">
    <xsd:annotation>
      <xsd:documentation>A process target description
A process can be a target only for runnable-constraints
processes: the reference zero or more Processes. If this list is empty, the target stands for all processes!</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="am:RunnableConstraintTarget">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="customProperties" type="am:CustomProperty"/>
          <xsd:element name="processes" type="am:Process"/>
        </xsd:choice>
        <xsd:attribute name="processes" type="xsd:string"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="TargetProcess" type="am:TargetProcess">
    <xsd:annotation>
      <xsd:documentation>A process target description
A process can be a target only for runnable-constraints
processes: the reference zero or more Processes. If this list is empty, the target stands for all processes!</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="TargetCallSequence">
    <xsd:annotation>
      <xsd:documentation>A call-sequence target description
A call-sequence can be a target only for runnable-constraints
callSequences: the reference to zero or more call-sequences. If this list is empty, the target stands for all call-sequences!</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="am:RunnableConstraintTarget">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="customProperties" type="am:CustomProperty"/>
          <xsd:element name="callSequences" type="am:CallSequence"/>
        </xsd:choice>
        <xsd:attribute name="callSequences" type="xsd:string"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="TargetCallSequence" type="am:TargetCallSequence">
    <xsd:annotation>
      <xsd:documentation>A call-sequence target description
A call-sequence can be a target only for runnable-constraints
callSequences: the reference to zero or more call-sequences. If this list is empty, the target stands for all call-sequences!</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType abstract="true" name="RunnableGroup">
    <xsd:annotation>
      <xsd:documentation>A abstract description for a group of runnables that can be paired or separated by a runnable-constraint</xsd:documentation>
    </xsd:annotation>
    <xsd:choice maxOccurs="unbounded" minOccurs="0">
      <xsd:element ref="xmi:Extension"/>
    </xsd:choice>
    <xsd:attribute ref="xmi:id"/>
    <xsd:attributeGroup ref="xmi:ObjectAttribs"/>
  </xsd:complexType>
  <xsd:element name="RunnableGroup" type="am:RunnableGroup">
    <xsd:annotation>
      <xsd:documentation>A abstract description for a group of runnables that can be paired or separated by a runnable-constraint</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType abstract="true" name="ProcessGroup">
    <xsd:annotation>
      <xsd:documentation>A abstract description for a group of processes that can be paired or separated by a process-constraint</xsd:documentation>
    </xsd:annotation>
    <xsd:choice maxOccurs="unbounded" minOccurs="0">
      <xsd:element ref="xmi:Extension"/>
    </xsd:choice>
    <xsd:attribute ref="xmi:id"/>
    <xsd:attributeGroup ref="xmi:ObjectAttribs"/>
  </xsd:complexType>
  <xsd:element name="ProcessGroup" type="am:ProcessGroup">
    <xsd:annotation>
      <xsd:documentation>A abstract description for a group of processes that can be paired or separated by a process-constraint</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="SchedulerEntityGroup">
    <xsd:annotation>
      <xsd:documentation>A group of schedulers that can be paired or separated by a scheduler-constraint</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="am:BaseObject">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="schedulers" type="am:Scheduler"/>
        </xsd:choice>
        <xsd:attribute name="schedulers" type="xsd:string"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="SchedulerEntityGroup" type="am:SchedulerEntityGroup">
    <xsd:annotation>
      <xsd:documentation>A group of schedulers that can be paired or separated by a scheduler-constraint</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="RunnableEntityGroup">
    <xsd:annotation>
      <xsd:documentation>A group of runnables that can be paired or separated by a runnable-constraint</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="am:RunnableGroup">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="customProperties" type="am:CustomProperty"/>
          <xsd:element name="runnables" type="am:Runnable"/>
        </xsd:choice>
        <xsd:attribute name="runnables" type="xsd:string"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="RunnableEntityGroup" type="am:RunnableEntityGroup">
    <xsd:annotation>
      <xsd:documentation>A group of runnables that can be paired or separated by a runnable-constraint</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="ProcessEntityGroup">
    <xsd:annotation>
      <xsd:documentation>A group of processes that can be paired or separated by a process-constraint</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="am:ProcessGroup">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="customProperties" type="am:CustomProperty"/>
          <xsd:element name="processes" type="am:Process"/>
        </xsd:choice>
        <xsd:attribute name="processes" type="xsd:string"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="ProcessEntityGroup" type="am:ProcessEntityGroup">
    <xsd:annotation>
      <xsd:documentation>A group of processes that can be paired or separated by a process-constraint</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="TagGroup">
    <xsd:annotation>
      <xsd:documentation>A group that contains only a tag and groups all objects that are marked with this tag
This can be runnables or processes</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="am:RunnableGroup">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="customProperties" type="am:CustomProperty"/>
          <xsd:element name="tag" type="am:Tag"/>
        </xsd:choice>
        <xsd:attribute name="tag" type="xsd:string"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="TagGroup" type="am:TagGroup">
    <xsd:annotation>
      <xsd:documentation>A group that contains only a tag and groups all objects that are marked with this tag
This can be runnables or processes</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="EventChain">
    <xsd:annotation>
      <xsd:documentation>Describes an event chain which must have a minimum of two events (stimulus and response)
If there are more events the event chain have to be divided into segments. Each segment is another event chain.
Alternative event paths are contained in strands.
stimulus: Beginning of chain
response: End of chain
segments: Sub event chains
strands: alternative event paths</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="am:ReferableBaseObject">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="stimulus" type="am:Event"/>
          <xsd:element name="response" type="am:Event"/>
          <xsd:element name="segments" type="am:EventChainItem"/>
          <xsd:element name="strands" type="am:EventChainItem"/>
        </xsd:choice>
        <xsd:attribute name="stimulus" type="xsd:string"/>
        <xsd:attribute name="response" type="xsd:string"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="EventChain" type="am:EventChain">
    <xsd:annotation>
      <xsd:documentation>Describes an event chain which must have a minimum of two events (stimulus and response)
If there are more events the event chain have to be divided into segments. Each segment is another event chain.
Alternative event paths are contained in strands.
stimulus: Beginning of chain
response: End of chain
segments: Sub event chains
strands: alternative event paths</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType abstract="true" name="EventChainItem">
    <xsd:choice maxOccurs="unbounded" minOccurs="0">
      <xsd:element ref="xmi:Extension"/>
    </xsd:choice>
    <xsd:attribute ref="xmi:id"/>
    <xsd:attributeGroup ref="xmi:ObjectAttribs"/>
  </xsd:complexType>
  <xsd:element name="EventChainItem" type="am:EventChainItem"/>
  <xsd:complexType name="EventChainReference">
    <xsd:complexContent>
      <xsd:extension base="am:EventChainItem">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="customProperties" type="am:CustomProperty"/>
          <xsd:element name="eventChain" type="am:EventChain"/>
        </xsd:choice>
        <xsd:attribute name="eventChain" type="xsd:string"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="EventChainReference" type="am:EventChainReference"/>
  <xsd:complexType name="SubEventChain">
    <xsd:complexContent>
      <xsd:extension base="am:EventChainItem">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="customProperties" type="am:CustomProperty"/>
          <xsd:element name="eventChain" type="am:EventChain"/>
        </xsd:choice>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="SubEventChain" type="am:SubEventChain"/>
  <xsd:complexType abstract="true" name="TimingConstraint">
    <xsd:complexContent>
      <xsd:extension base="am:ReferableBaseObject"/>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="TimingConstraint" type="am:TimingConstraint"/>
  <xsd:complexType name="OrderConstraint">
    <xsd:annotation>
      <xsd:documentation>The order constraint defines a sequence of events
The restriction is based on the correct order of the occurrences</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="am:TimingConstraint">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="source" type="am:EntityEvent"/>
          <xsd:element name="target" type="am:EntityEvent"/>
        </xsd:choice>
        <xsd:attribute name="source" type="xsd:string"/>
        <xsd:attribute name="target" type="xsd:string"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="OrderConstraint" type="am:OrderConstraint">
    <xsd:annotation>
      <xsd:documentation>The order constraint defines a sequence of events
The restriction is based on the correct order of the occurrences</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="SynchronisationConstraint">
    <xsd:annotation>
      <xsd:documentation>The synchronization constraint considers a group of events and limits the distance of the events within this group.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="am:TimingConstraint">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="events" type="am:EntityEvent"/>
          <xsd:element name="tolerance" type="am:Time"/>
        </xsd:choice>
        <xsd:attribute name="events" type="xsd:string"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="SynchronisationConstraint" type="am:SynchronisationConstraint">
    <xsd:annotation>
      <xsd:documentation>The synchronization constraint considers a group of events and limits the distance of the events within this group.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="ReactionConstraint">
    <xsd:complexContent>
      <xsd:extension base="am:TimingConstraint">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="scope" type="am:EventChain"/>
          <xsd:element name="minimum" type="am:Time"/>
          <xsd:element name="maximum" type="am:Time"/>
        </xsd:choice>
        <xsd:attribute name="scope" type="xsd:string"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="ReactionConstraint" type="am:ReactionConstraint"/>
  <xsd:complexType name="DelayConstraint">
    <xsd:annotation>
      <xsd:documentation>This constraint describes how a source and a target event are placed relative to each other</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="am:TimingConstraint">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="source" type="am:EntityEvent"/>
          <xsd:element name="target" type="am:EntityEvent"/>
          <xsd:element name="upper" type="am:Time"/>
          <xsd:element name="lower" type="am:Time"/>
        </xsd:choice>
        <xsd:attribute name="source" type="xsd:string"/>
        <xsd:attribute name="target" type="xsd:string"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="DelayConstraint" type="am:DelayConstraint">
    <xsd:annotation>
      <xsd:documentation>This constraint describes how a source and a target event are placed relative to each other</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="AgeConstraint">
    <xsd:complexContent>
      <xsd:extension base="am:TimingConstraint">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="scope" type="am:EventChain"/>
          <xsd:element name="maximum" type="am:Time"/>
          <xsd:element name="minimum" type="am:Time"/>
        </xsd:choice>
        <xsd:attribute name="scope" type="xsd:string"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="AgeConstraint" type="am:AgeConstraint"/>
  <xsd:complexType name="RepetitionConstraint">
    <xsd:annotation>
      <xsd:documentation>A repetition constraint prescribes the distribution of a single event during runtime.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="am:TimingConstraint">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="event" type="am:EntityEvent"/>
          <xsd:element name="lower" type="am:Time"/>
          <xsd:element name="upper" type="am:Time"/>
          <xsd:element name="jitter" type="am:Time"/>
        </xsd:choice>
        <xsd:attribute name="span" type="xsd:int"/>
        <xsd:attribute name="event" type="xsd:string"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="RepetitionConstraint" type="am:RepetitionConstraint">
    <xsd:annotation>
      <xsd:documentation>A repetition constraint prescribes the distribution of a single event during runtime.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="DataAgeConstraint">
    <xsd:complexContent>
      <xsd:extension base="am:ReferableBaseObject">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="runnable" type="am:Runnable"/>
          <xsd:element name="label" type="am:Label"/>
          <xsd:element name="dataAge" type="am:DataAge"/>
        </xsd:choice>
        <xsd:attribute name="runnable" type="xsd:string"/>
        <xsd:attribute name="label" type="xsd:string"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="DataAgeConstraint" type="am:DataAgeConstraint"/>
  <xsd:complexType abstract="true" name="DataAge">
    <xsd:choice maxOccurs="unbounded" minOccurs="0">
      <xsd:element ref="xmi:Extension"/>
    </xsd:choice>
    <xsd:attribute ref="xmi:id"/>
    <xsd:attributeGroup ref="xmi:ObjectAttribs"/>
  </xsd:complexType>
  <xsd:element name="DataAge" type="am:DataAge"/>
  <xsd:complexType name="DataAgeCycle">
    <xsd:complexContent>
      <xsd:extension base="am:DataAge">
        <xsd:attribute name="minimumCycle" type="xsd:int"/>
        <xsd:attribute name="maximumCycle" type="xsd:int"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="DataAgeCycle" type="am:DataAgeCycle"/>
  <xsd:complexType name="DataAgeTime">
    <xsd:complexContent>
      <xsd:extension base="am:DataAge">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="minimumTime" type="am:Time"/>
          <xsd:element name="maximumTime" type="am:Time"/>
        </xsd:choice>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="DataAgeTime" type="am:DataAgeTime"/>
  <xsd:complexType abstract="true" name="Requirement">
    <xsd:complexContent>
      <xsd:extension base="am:BaseObject">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="limit" type="am:RequirementLimit"/>
        </xsd:choice>
        <xsd:attribute name="name" type="xsd:string"/>
        <xsd:attribute name="severity" type="am:Severity"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="Requirement" type="am:Requirement"/>
  <xsd:complexType name="ProcessRequirement">
    <xsd:complexContent>
      <xsd:extension base="am:Requirement">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="process" type="am:AbstractProcess"/>
        </xsd:choice>
        <xsd:attribute name="process" type="xsd:string"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="ProcessRequirement" type="am:ProcessRequirement"/>
  <xsd:complexType name="RunnableRequirement">
    <xsd:complexContent>
      <xsd:extension base="am:Requirement">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="runnable" type="am:Runnable"/>
        </xsd:choice>
        <xsd:attribute name="runnable" type="xsd:string"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="RunnableRequirement" type="am:RunnableRequirement"/>
  <xsd:complexType name="ArchitectureRequirement">
    <xsd:complexContent>
      <xsd:extension base="am:Requirement">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="component" type="am:Component"/>
        </xsd:choice>
        <xsd:attribute name="component" type="xsd:string"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="ArchitectureRequirement" type="am:ArchitectureRequirement"/>
  <xsd:complexType name="ProcessChainRequirement">
    <xsd:complexContent>
      <xsd:extension base="am:Requirement">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="processChain" type="am:ProcessChain"/>
        </xsd:choice>
        <xsd:attribute name="processChain" type="xsd:string"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="ProcessChainRequirement" type="am:ProcessChainRequirement"/>
  <xsd:complexType abstract="true" name="RequirementLimit">
    <xsd:choice maxOccurs="unbounded" minOccurs="0">
      <xsd:element ref="xmi:Extension"/>
    </xsd:choice>
    <xsd:attribute ref="xmi:id"/>
    <xsd:attributeGroup ref="xmi:ObjectAttribs"/>
    <xsd:attribute name="limitType" type="am:LimitType"/>
  </xsd:complexType>
  <xsd:element name="RequirementLimit" type="am:RequirementLimit"/>
  <xsd:complexType name="CPUPercentageRequirementLimit">
    <xsd:complexContent>
      <xsd:extension base="am:RequirementLimit">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="hardwareContext" type="am:ComplexNode"/>
        </xsd:choice>
        <xsd:attribute name="metric" type="am:CPUPercentageMetric"/>
        <xsd:attribute name="limitValue" type="xsd:double"/>
        <xsd:attribute name="hardwareContext" type="xsd:string"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="CPUPercentageRequirementLimit" type="am:CPUPercentageRequirementLimit"/>
  <xsd:complexType name="FrequencyRequirementLimit">
    <xsd:complexContent>
      <xsd:extension base="am:RequirementLimit">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="limitValue" type="am:Frequency"/>
        </xsd:choice>
        <xsd:attribute name="metric" type="am:FrequencyMetric"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="FrequencyRequirementLimit" type="am:FrequencyRequirementLimit"/>
  <xsd:complexType name="PercentageRequirementLimit">
    <xsd:complexContent>
      <xsd:extension base="am:RequirementLimit">
        <xsd:attribute name="metric" type="am:PercentageMetric"/>
        <xsd:attribute name="limitValue" type="xsd:double"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="PercentageRequirementLimit" type="am:PercentageRequirementLimit"/>
  <xsd:complexType name="CountRequirementLimit">
    <xsd:complexContent>
      <xsd:extension base="am:RequirementLimit">
        <xsd:attribute name="metric" type="am:CountMetric"/>
        <xsd:attribute name="limitValue" type="xsd:int"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="CountRequirementLimit" type="am:CountRequirementLimit"/>
  <xsd:complexType name="TimeRequirementLimit">
    <xsd:complexContent>
      <xsd:extension base="am:RequirementLimit">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="limitValue" type="am:SignedTime"/>
        </xsd:choice>
        <xsd:attribute name="metric" type="am:TimeMetric"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="TimeRequirementLimit" type="am:TimeRequirementLimit"/>
  <xsd:complexType name="DataCoherencyGroup">
    <xsd:complexContent>
      <xsd:extension base="am:ReferableBaseObject">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="labels" type="am:Label"/>
          <xsd:element name="scope" type="am:DataCoherencyGroupScope"/>
        </xsd:choice>
        <xsd:attribute name="direction" type="am:CoherencyDirection"/>
        <xsd:attribute name="labels" type="xsd:string"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="DataCoherencyGroup" type="am:DataCoherencyGroup"/>
  <xsd:complexType abstract="true" name="DataCoherencyGroupScope">
    <xsd:choice maxOccurs="unbounded" minOccurs="0">
      <xsd:element ref="xmi:Extension"/>
    </xsd:choice>
    <xsd:attribute ref="xmi:id"/>
    <xsd:attributeGroup ref="xmi:ObjectAttribs"/>
  </xsd:complexType>
  <xsd:element name="DataCoherencyGroupScope" type="am:DataCoherencyGroupScope"/>
  <xsd:complexType name="ProcessScope">
    <xsd:complexContent>
      <xsd:extension base="am:DataCoherencyGroupScope">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="process" type="am:AbstractProcess"/>
        </xsd:choice>
        <xsd:attribute name="process" type="xsd:string"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="ProcessScope" type="am:ProcessScope"/>
  <xsd:complexType name="RunnableScope">
    <xsd:complexContent>
      <xsd:extension base="am:DataCoherencyGroupScope">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="runnable" type="am:Runnable"/>
        </xsd:choice>
        <xsd:attribute name="runnable" type="xsd:string"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="RunnableScope" type="am:RunnableScope"/>
  <xsd:complexType name="ComponentScope">
    <xsd:complexContent>
      <xsd:extension base="am:DataCoherencyGroupScope">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="component" type="am:Component"/>
        </xsd:choice>
        <xsd:attribute name="component" type="xsd:string"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="ComponentScope" type="am:ComponentScope"/>
  <xsd:complexType name="EventModel">
    <xsd:annotation>
      <xsd:documentation>*
===============================================================================
===============================================================================

								Events Model

===============================================================================
===============================================================================</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="am:BaseObject">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="events" type="am:Event"/>
        </xsd:choice>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="EventModel" type="am:EventModel">
    <xsd:annotation>
      <xsd:documentation>*
===============================================================================
===============================================================================

								Events Model

===============================================================================
===============================================================================</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType abstract="true" name="Event">
    <xsd:annotation>
      <xsd:documentation>An abstract event</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="am:ReferableBaseObject">
        <xsd:attribute name="description" type="xsd:string"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="Event" type="am:Event">
    <xsd:annotation>
      <xsd:documentation>An abstract event</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="EventSet">
    <xsd:annotation>
      <xsd:documentation>A set of entity-events</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="am:Event">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="events" type="am:EntityEvent"/>
        </xsd:choice>
        <xsd:attribute name="events" type="xsd:string"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="EventSet" type="am:EventSet">
    <xsd:annotation>
      <xsd:documentation>A set of entity-events</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType abstract="true" name="EntityEvent">
    <xsd:annotation>
      <xsd:documentation>An abstract event that describes the notification of a changed state of an entity</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="am:Event"/>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="EntityEvent" type="am:EntityEvent">
    <xsd:annotation>
      <xsd:documentation>An abstract event that describes the notification of a changed state of an entity</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="CustomEvent">
    <xsd:complexContent>
      <xsd:extension base="am:EntityEvent">
        <xsd:attribute name="eventType" type="xsd:string"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="CustomEvent" type="am:CustomEvent"/>
  <xsd:complexType name="StimulusEvent">
    <xsd:annotation>
      <xsd:documentation>Describes the event of a stimulus.
It contains only the stimulus but no event type because a stimulus has only one event type.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="am:EntityEvent">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="entity" type="am:Stimulus"/>
        </xsd:choice>
        <xsd:attribute name="entity" type="xsd:string"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="StimulusEvent" type="am:StimulusEvent">
    <xsd:annotation>
      <xsd:documentation>Describes the event of a stimulus.
It contains only the stimulus but no event type because a stimulus has only one event type.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="ProcessEvent">
    <xsd:annotation>
      <xsd:documentation>Describes the event of a process
eventType: The type of the Event
entity: The process that fires the event (optional)
core: The core that processes the process when the event is fired (optional)</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="am:EntityEvent">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="entity" type="am:Process"/>
          <xsd:element name="core" type="am:Core"/>
        </xsd:choice>
        <xsd:attribute name="eventType" type="am:ProcessEventType" use="required"/>
        <xsd:attribute name="entity" type="xsd:string"/>
        <xsd:attribute name="core" type="xsd:string"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="ProcessEvent" type="am:ProcessEvent">
    <xsd:annotation>
      <xsd:documentation>Describes the event of a process
eventType: The type of the Event
entity: The process that fires the event (optional)
core: The core that processes the process when the event is fired (optional)</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="ProcessChainEvent">
    <xsd:annotation>
      <xsd:documentation>Describes the event of some process within a process chain
eventType: The type of the Event
entity: The process that fires the event (optional)
core: The core that processes the process when the event is fired (optional)</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="am:EntityEvent">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="entity" type="am:ProcessChain"/>
          <xsd:element name="core" type="am:Core"/>
        </xsd:choice>
        <xsd:attribute name="eventType" type="am:ProcessEventType" use="required"/>
        <xsd:attribute name="entity" type="xsd:string"/>
        <xsd:attribute name="core" type="xsd:string"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="ProcessChainEvent" type="am:ProcessChainEvent">
    <xsd:annotation>
      <xsd:documentation>Describes the event of some process within a process chain
eventType: The type of the Event
entity: The process that fires the event (optional)
core: The core that processes the process when the event is fired (optional)</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="RunnableEvent">
    <xsd:annotation>
      <xsd:documentation>Describes the event of a runnable
eventType: The type of event
entity: The runnable that fires the event (optional)
process: The process that executes the runnable (optional)
core: The core that processes the runnable (processes the process that executes the runnable) (optional)</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="am:EntityEvent">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="entity" type="am:Runnable"/>
          <xsd:element name="process" type="am:Process"/>
          <xsd:element name="core" type="am:Core"/>
        </xsd:choice>
        <xsd:attribute name="eventType" type="am:RunnableEventType" use="required"/>
        <xsd:attribute name="entity" type="xsd:string"/>
        <xsd:attribute name="process" type="xsd:string"/>
        <xsd:attribute name="core" type="xsd:string"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="RunnableEvent" type="am:RunnableEvent">
    <xsd:annotation>
      <xsd:documentation>Describes the event of a runnable
eventType: The type of event
entity: The runnable that fires the event (optional)
process: The process that executes the runnable (optional)
core: The core that processes the runnable (processes the process that executes the runnable) (optional)</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="LabelEvent">
    <xsd:annotation>
      <xsd:documentation>Describes the event of a label access
eventType: The type of event
entity: The accessed label that fires the event
runnable: The runnable that accesses the label (optional)
process: The process that accesses the label (optional)</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="am:EntityEvent">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="entity" type="am:Label"/>
          <xsd:element name="runnable" type="am:Runnable"/>
          <xsd:element name="process" type="am:Process"/>
        </xsd:choice>
        <xsd:attribute name="eventType" type="am:LabelEventType" use="required"/>
        <xsd:attribute name="entity" type="xsd:string"/>
        <xsd:attribute name="runnable" type="xsd:string"/>
        <xsd:attribute name="process" type="xsd:string"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="LabelEvent" type="am:LabelEvent">
    <xsd:annotation>
      <xsd:documentation>Describes the event of a label access
eventType: The type of event
entity: The accessed label that fires the event
runnable: The runnable that accesses the label (optional)
process: The process that accesses the label (optional)</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="SemaphoreEvent">
    <xsd:annotation>
      <xsd:documentation>Describes the event of a semaphore access
eventType: The type of event
entity: The accessed semaphore that fires the event
runnable: The runnable that accesses the semaphore (optional)
process: The process that accesses the semaphore (optional)
core: The core that processes the process/runnable that accesses the semaphore (optional)</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="am:EntityEvent">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="entity" type="am:Semaphore"/>
          <xsd:element name="runnable" type="am:Runnable"/>
          <xsd:element name="process" type="am:Process"/>
          <xsd:element name="core" type="am:Core"/>
        </xsd:choice>
        <xsd:attribute name="eventType" type="am:SemaphoreEventType" use="required"/>
        <xsd:attribute name="entity" type="xsd:string"/>
        <xsd:attribute name="runnable" type="xsd:string"/>
        <xsd:attribute name="process" type="xsd:string"/>
        <xsd:attribute name="core" type="xsd:string"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="SemaphoreEvent" type="am:SemaphoreEvent">
    <xsd:annotation>
      <xsd:documentation>Describes the event of a semaphore access
eventType: The type of event
entity: The accessed semaphore that fires the event
runnable: The runnable that accesses the semaphore (optional)
process: The process that accesses the semaphore (optional)
core: The core that processes the process/runnable that accesses the semaphore (optional)</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="HWModel">
    <xsd:annotation>
      <xsd:documentation>*
===============================================================================
===============================================================================

								HW Model

===============================================================================
===============================================================================</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="am:BaseObject">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="tags" type="am:Tag"/>
          <xsd:element name="systemTypes" type="am:SystemType"/>
          <xsd:element name="ecuTypes" type="am:ECUType"/>
          <xsd:element name="mcTypes" type="am:MicrocontrollerType"/>
          <xsd:element name="coreTypes" type="am:CoreType"/>
          <xsd:element name="memoryTypes" type="am:MemoryType"/>
          <xsd:element name="networkTypes" type="am:NetworkType"/>
          <xsd:element name="accessPaths" type="am:AccessPath"/>
          <xsd:element name="system" type="am:HwSystem"/>
        </xsd:choice>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="HWModel" type="am:HWModel">
    <xsd:annotation>
      <xsd:documentation>*
===============================================================================
===============================================================================

								HW Model

===============================================================================
===============================================================================</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType abstract="true" name="ComplexNode">
    <xsd:complexContent>
      <xsd:extension base="am:ReferableBaseObject">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="tags" type="am:Tag"/>
          <xsd:element name="quartzes" type="am:Quartz"/>
          <xsd:element name="prescaler" type="am:Prescaler"/>
          <xsd:element name="memories" type="am:Memory"/>
          <xsd:element name="networks" type="am:Network"/>
          <xsd:element name="components" type="am:HwComponent"/>
          <xsd:element name="ports" type="am:HwPort"/>
        </xsd:choice>
        <xsd:attribute name="tags" type="xsd:string"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="ComplexNode" type="am:ComplexNode"/>
  <xsd:complexType name="HwSystem">
    <xsd:complexContent>
      <xsd:extension base="am:ComplexNode">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="systemType" type="am:SystemType"/>
          <xsd:element name="ecus" type="am:ECU"/>
        </xsd:choice>
        <xsd:attribute name="systemType" type="xsd:string"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="HwSystem" type="am:HwSystem"/>
  <xsd:complexType name="ECU">
    <xsd:complexContent>
      <xsd:extension base="am:ComplexNode">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="ecuType" type="am:ECUType"/>
          <xsd:element name="microcontrollers" type="am:Microcontroller"/>
        </xsd:choice>
        <xsd:attribute name="ecuType" type="xsd:string"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="ECU" type="am:ECU"/>
  <xsd:complexType name="Microcontroller">
    <xsd:complexContent>
      <xsd:extension base="am:ComplexNode">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="microcontrollerType" type="am:MicrocontrollerType"/>
          <xsd:element name="cores" type="am:Core"/>
        </xsd:choice>
        <xsd:attribute name="microcontrollerType" type="xsd:string"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="Microcontroller" type="am:Microcontroller"/>
  <xsd:complexType name="Core">
    <xsd:complexContent>
      <xsd:extension base="am:ComplexNode">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="coreType" type="am:CoreType"/>
        </xsd:choice>
        <xsd:attribute name="lockstepGroup" type="xsd:int"/>
        <xsd:attribute name="coreType" type="xsd:string"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="Core" type="am:Core"/>
  <xsd:complexType name="Memory">
    <xsd:complexContent>
      <xsd:extension base="am:ComplexNode">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="type" type="am:MemoryType"/>
        </xsd:choice>
        <xsd:attribute name="type" type="xsd:string"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="Memory" type="am:Memory"/>
  <xsd:complexType name="Network">
    <xsd:complexContent>
      <xsd:extension base="am:ComplexNode">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="type" type="am:NetworkType"/>
        </xsd:choice>
        <xsd:attribute name="type" type="xsd:string"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="Network" type="am:Network"/>
  <xsd:complexType name="Quartz">
    <xsd:complexContent>
      <xsd:extension base="am:ComplexNode">
        <xsd:attribute name="frequency" type="xsd:int"/>
        <xsd:attribute name="type" type="am:QType"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="Quartz" type="am:Quartz"/>
  <xsd:complexType name="HwComponent">
    <xsd:complexContent>
      <xsd:extension base="am:ComplexNode">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="nestedComponents" type="am:HwComponent"/>
        </xsd:choice>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="HwComponent" type="am:HwComponent"/>
  <xsd:complexType abstract="true" name="HardwareTypeDescription">
    <xsd:complexContent>
      <xsd:extension base="am:ReferableBaseObject">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="tags" type="am:Tag"/>
        </xsd:choice>
        <xsd:attribute name="tags" type="xsd:string"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="HardwareTypeDescription" type="am:HardwareTypeDescription"/>
  <xsd:complexType name="AbstractionType">
    <xsd:complexContent>
      <xsd:extension base="am:HardwareTypeDescription"/>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="AbstractionType" type="am:AbstractionType"/>
  <xsd:complexType name="SystemType">
    <xsd:complexContent>
      <xsd:extension base="am:AbstractionType"/>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="SystemType" type="am:SystemType"/>
  <xsd:complexType name="ECUType">
    <xsd:complexContent>
      <xsd:extension base="am:AbstractionType"/>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="ECUType" type="am:ECUType"/>
  <xsd:complexType name="MicrocontrollerType">
    <xsd:complexContent>
      <xsd:extension base="am:AbstractionType"/>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="MicrocontrollerType" type="am:MicrocontrollerType"/>
  <xsd:complexType name="CoreType">
    <xsd:complexContent>
      <xsd:extension base="am:AbstractionType">
        <xsd:attribute name="bitWidth" type="xsd:int"/>
        <xsd:attribute name="instructionsPerCycle" type="xsd:int"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="CoreType" type="am:CoreType"/>
  <xsd:complexType name="MemoryType">
    <xsd:complexContent>
      <xsd:extension base="am:HardwareTypeDescription">
        <xsd:attribute name="xAccessPattern" type="xsd:string"/>
        <xsd:attribute name="type" type="am:MemoryTypeEnum"/>
        <xsd:attribute name="size" type="xsd:long"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="MemoryType" type="am:MemoryType"/>
  <xsd:complexType name="NetworkType">
    <xsd:complexContent>
      <xsd:extension base="am:HardwareTypeDescription">
        <xsd:attribute name="schedPolicy" type="am:SchedType"/>
        <xsd:attribute name="bitWidth" type="xsd:int"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="NetworkType" type="am:NetworkType"/>
  <xsd:complexType name="HwPort">
    <xsd:complexContent>
      <xsd:extension base="am:ReferableBaseObject">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="pins" type="am:Pin"/>
        </xsd:choice>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="HwPort" type="am:HwPort"/>
  <xsd:complexType name="Pin">
    <xsd:complexContent>
      <xsd:extension base="am:ReferableBaseObject"/>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="Pin" type="am:Pin"/>
  <xsd:complexType name="ComplexPort">
    <xsd:complexContent>
      <xsd:extension base="am:HwPort">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="network" type="am:Network"/>
        </xsd:choice>
        <xsd:attribute name="master" type="xsd:boolean"/>
        <xsd:attribute name="bitWidth" type="xsd:int"/>
        <xsd:attribute name="baseAddress" type="xsd:long"/>
        <xsd:attribute name="addressRange" type="xsd:long"/>
        <xsd:attribute name="direction" type="am:RWType"/>
        <xsd:attribute name="writeCycles" type="xsd:int"/>
        <xsd:attribute name="readCycles" type="xsd:int"/>
        <xsd:attribute name="schedValue" type="xsd:int"/>
        <xsd:attribute name="network" type="xsd:string"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="ComplexPort" type="am:ComplexPort"/>
  <xsd:complexType name="ComplexPin">
    <xsd:complexContent>
      <xsd:extension base="am:Pin">
        <xsd:attribute name="type" type="am:PinType"/>
        <xsd:attribute name="baseAddress" type="xsd:long"/>
        <xsd:attribute name="direction" type="am:RWType"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="ComplexPin" type="am:ComplexPin"/>
  <xsd:complexType name="Prescaler">
    <xsd:choice maxOccurs="unbounded" minOccurs="0">
      <xsd:element name="quartz" type="am:Quartz"/>
      <xsd:element ref="xmi:Extension"/>
    </xsd:choice>
    <xsd:attribute ref="xmi:id"/>
    <xsd:attributeGroup ref="xmi:ObjectAttribs"/>
    <xsd:attribute name="name" type="xsd:string"/>
    <xsd:attribute name="clockRatio" type="xsd:double"/>
    <xsd:attribute name="quartz" type="xsd:string"/>
  </xsd:complexType>
  <xsd:element name="Prescaler" type="am:Prescaler"/>
  <xsd:complexType name="CrossbarSwitch">
    <xsd:complexContent>
      <xsd:extension base="am:NetworkType">
        <xsd:attribute name="conConnections" type="xsd:int"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="CrossbarSwitch" type="am:CrossbarSwitch"/>
  <xsd:complexType name="Bus">
    <xsd:complexContent>
      <xsd:extension base="am:NetworkType">
        <xsd:attribute name="busType" type="am:BusType"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="Bus" type="am:Bus"/>
  <xsd:complexType name="Bridge">
    <xsd:complexContent>
      <xsd:extension base="am:NetworkType"/>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="Bridge" type="am:Bridge"/>
  <xsd:complexType abstract="true" name="AccessPath">
    <xsd:complexContent>
      <xsd:extension base="am:IReferable">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="source" type="am:ComplexNode"/>
          <xsd:element name="target" type="am:ComplexNode"/>
        </xsd:choice>
        <xsd:attribute name="source" type="xsd:string"/>
        <xsd:attribute name="target" type="xsd:string"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="AccessPath" type="am:AccessPath"/>
  <xsd:complexType name="LatencyAccessPath">
    <xsd:annotation>
      <xsd:documentation> AccessPath represented by latencies in cycles</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="am:AccessPath">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="latencies" type="am:LatencyAccessPathElement"/>
        </xsd:choice>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="LatencyAccessPath" type="am:LatencyAccessPath">
    <xsd:annotation>
      <xsd:documentation> AccessPath represented by latencies in cycles</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="HwAccessPath">
    <xsd:annotation>
      <xsd:documentation> AccessPath represented by directly referencing to existing HW elements (Ports)</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="am:AccessPath">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="hwElements" type="am:HwAccessPathElement"/>
        </xsd:choice>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="HwAccessPath" type="am:HwAccessPath">
    <xsd:annotation>
      <xsd:documentation> AccessPath represented by directly referencing to existing HW elements (Ports)</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType abstract="true" name="LatencyAccessPathElement">
    <xsd:choice maxOccurs="unbounded" minOccurs="0">
      <xsd:element ref="xmi:Extension"/>
    </xsd:choice>
    <xsd:attribute ref="xmi:id"/>
    <xsd:attributeGroup ref="xmi:ObjectAttribs"/>
  </xsd:complexType>
  <xsd:element name="LatencyAccessPathElement" type="am:LatencyAccessPathElement"/>
  <xsd:complexType name="AccessPathRef">
    <xsd:complexContent>
      <xsd:extension base="am:LatencyAccessPathElement">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="ref" type="am:LatencyAccessPath"/>
        </xsd:choice>
        <xsd:attribute name="ref" type="xsd:string"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="AccessPathRef" type="am:AccessPathRef"/>
  <xsd:complexType abstract="true" name="Latency">
    <xsd:complexContent>
      <xsd:extension base="am:LatencyAccessPathElement">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="quartz" type="am:Quartz"/>
        </xsd:choice>
        <xsd:attribute name="accessType" type="am:RWType"/>
        <xsd:attribute name="transferSize" type="xsd:long"/>
        <xsd:attribute name="quartz" type="xsd:string"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="Latency" type="am:Latency"/>
  <xsd:complexType name="LatencyConstant">
    <xsd:complexContent>
      <xsd:extension base="am:Latency">
        <xsd:attribute name="value" type="xsd:long"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="LatencyConstant" type="am:LatencyConstant"/>
  <xsd:complexType name="LatencyDeviation">
    <xsd:complexContent>
      <xsd:extension base="am:Latency">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="deviation" type="am:Deviation"/>
        </xsd:choice>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="LatencyDeviation" type="am:LatencyDeviation"/>
  <xsd:complexType abstract="true" name="HwAccessPathElement">
    <xsd:choice maxOccurs="unbounded" minOccurs="0">
      <xsd:element ref="xmi:Extension"/>
    </xsd:choice>
    <xsd:attribute ref="xmi:id"/>
    <xsd:attributeGroup ref="xmi:ObjectAttribs"/>
  </xsd:complexType>
  <xsd:element name="HwAccessPathElement" type="am:HwAccessPathElement"/>
  <xsd:complexType name="HwAccessPathRef">
    <xsd:complexContent>
      <xsd:extension base="am:HwAccessPathElement">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="ref" type="am:HwAccessPath"/>
        </xsd:choice>
        <xsd:attribute name="ref" type="xsd:string"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="HwAccessPathRef" type="am:HwAccessPathRef"/>
  <xsd:complexType name="HwElementRef">
    <xsd:complexContent>
      <xsd:extension base="am:HwAccessPathElement">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="port" type="am:ComplexPort"/>
        </xsd:choice>
        <xsd:attribute name="port" type="xsd:string"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="HwElementRef" type="am:HwElementRef"/>
  <xsd:complexType name="MappingModel">
    <xsd:annotation>
      <xsd:documentation>*
===============================================================================
===============================================================================

								Mapping Model

===============================================================================
===============================================================================</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="am:BaseObject">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="taskAllocation" type="am:TaskAllocation"/>
          <xsd:element name="isrAllocation" type="am:ISRAllocation"/>
          <xsd:element name="runnableAllocation" type="am:RunnableAllocation"/>
          <xsd:element name="coreAllocation" type="am:CoreAllocation"/>
          <xsd:element name="mapping" type="am:Mapping"/>
        </xsd:choice>
        <xsd:attribute name="addressMappingType" type="am:MemoryAddressMappingType"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="MappingModel" type="am:MappingModel">
    <xsd:annotation>
      <xsd:documentation>*
===============================================================================
===============================================================================

								Mapping Model

===============================================================================
===============================================================================</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="CoreAllocation">
    <xsd:annotation>
      <xsd:documentation>Allocation of Cores to schedulers</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="am:BaseObject">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="scheduler" type="am:Scheduler"/>
          <xsd:element name="core" type="am:Core"/>
        </xsd:choice>
        <xsd:attribute name="scheduler" type="xsd:string"/>
        <xsd:attribute name="core" type="xsd:string"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="CoreAllocation" type="am:CoreAllocation">
    <xsd:annotation>
      <xsd:documentation>Allocation of Cores to schedulers</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType abstract="true" name="Mapping">
    <xsd:annotation>
      <xsd:documentation>Generalization for all Mapping types.
Mappings assign Runnables/Signals to memories</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="am:BaseObject">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="memory" type="am:Memory">
            <xsd:annotation>
              <xsd:documentation>The memory where the element is mapped to</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
        <xsd:attribute name="memoryPositionAddress" type="xsd:long">
          <xsd:annotation>
            <xsd:documentation>The position of the element in the mapped memory</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="memory" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>The memory where the element is mapped to</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="Mapping" type="am:Mapping">
    <xsd:annotation>
      <xsd:documentation>Generalization for all Mapping types.
Mappings assign Runnables/Signals to memories</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="SectionMapping">
    <xsd:annotation>
      <xsd:documentation>Sections (D4.2, Chapter 3.3.2)
Sections refer to Labels and/or Runnables.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="am:Mapping">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="section" type="am:Section"/>
        </xsd:choice>
        <xsd:attribute name="section" type="xsd:string"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="SectionMapping" type="am:SectionMapping">
    <xsd:annotation>
      <xsd:documentation>Sections (D4.2, Chapter 3.3.2)
Sections refer to Labels and/or Runnables.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="AbstractElementMapping">
    <xsd:annotation>
      <xsd:documentation>AbstractElementMemoryInformation (D4.2, Chapter 3.3.2)
Generalization of Label, Runnable, AbstractProcess ( ISR &amp; Task) and
TaskPrototype.
This mapping describes the allocation of its specializations to a specific
memory.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="am:Mapping">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="abstractElement" type="am:AbstractElementMemoryInformation"/>
        </xsd:choice>
        <xsd:attribute name="abstractElement" type="xsd:string"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="AbstractElementMapping" type="am:AbstractElementMapping">
    <xsd:annotation>
      <xsd:documentation>AbstractElementMemoryInformation (D4.2, Chapter 3.3.2)
Generalization of Label, Runnable, AbstractProcess ( ISR &amp; Task) and
TaskPrototype.
This mapping describes the allocation of its specializations to a specific
memory.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="TaskAllocation">
    <xsd:complexContent>
      <xsd:extension base="am:BaseObject">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="task" type="am:Task"/>
          <xsd:element name="scheduler" type="am:TaskScheduler"/>
        </xsd:choice>
        <xsd:attribute name="task" type="xsd:string"/>
        <xsd:attribute name="scheduler" type="xsd:string"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="TaskAllocation" type="am:TaskAllocation"/>
  <xsd:complexType name="ISRAllocation">
    <xsd:complexContent>
      <xsd:extension base="am:BaseObject">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="isr" type="am:ISR"/>
          <xsd:element name="controller" type="am:InterruptController"/>
        </xsd:choice>
        <xsd:attribute name="isr" type="xsd:string"/>
        <xsd:attribute name="controller" type="xsd:string"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="ISRAllocation" type="am:ISRAllocation"/>
  <xsd:complexType name="RunnableAllocation">
    <xsd:complexContent>
      <xsd:extension base="am:BaseObject">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="scheduler" type="am:Scheduler"/>
          <xsd:element name="entity" type="am:Runnable"/>
        </xsd:choice>
        <xsd:attribute name="scheduler" type="xsd:string"/>
        <xsd:attribute name="entity" type="xsd:string"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="RunnableAllocation" type="am:RunnableAllocation"/>
  <xsd:complexType name="OSModel">
    <xsd:annotation>
      <xsd:documentation>*
===============================================================================
===============================================================================

								OS Model

===============================================================================
===============================================================================</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="am:BaseObject">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="osBuffering" type="am:OsBuffering"/>
          <xsd:element name="semaphores" type="am:Semaphore"/>
          <xsd:element name="operatingSystems" type="am:OperatingSystem"/>
          <xsd:element name="osOverheads" type="am:OsInstructions"/>
        </xsd:choice>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="OSModel" type="am:OSModel">
    <xsd:annotation>
      <xsd:documentation>*
===============================================================================
===============================================================================

								OS Model

===============================================================================
===============================================================================</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="OsBuffering">
    <xsd:annotation>
      <xsd:documentation>buffering for intercore communication (process on core 1 communicates witch process on core 2)
runnable-, process-, and scheduleSectionLevel defines the section where buffering occurs
at selected layer, data is read at beginning of section and written back at the end of the section</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="am:BaseObject">
        <xsd:attribute name="runnableLevel" type="xsd:boolean"/>
        <xsd:attribute name="processLevel" type="xsd:boolean"/>
        <xsd:attribute name="scheduleSectionLevel" type="xsd:boolean"/>
        <xsd:attribute name="bufferingAlgorithm" type="xsd:string"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="OsBuffering" type="am:OsBuffering">
    <xsd:annotation>
      <xsd:documentation>buffering for intercore communication (process on core 1 communicates witch process on core 2)
runnable-, process-, and scheduleSectionLevel defines the section where buffering occurs
at selected layer, data is read at beginning of section and written back at the end of the section</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="Semaphore">
    <xsd:annotation>
      <xsd:documentation>name: Name of semaphore
maxValue: maximum number of users which can access the semaphore simultaneously
initialValue: number of users which access semaphore at system startup
priorityCeilingProtocol: enables priority ceiling for this resource</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="am:ReferableBaseObject">
        <xsd:attribute name="initalValue" type="xsd:int"/>
        <xsd:attribute name="maxValue" type="xsd:int"/>
        <xsd:attribute name="priorityCeilingProtocol" type="xsd:boolean"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="Semaphore" type="am:Semaphore">
    <xsd:annotation>
      <xsd:documentation>name: Name of semaphore
maxValue: maximum number of users which can access the semaphore simultaneously
initialValue: number of users which access semaphore at system startup
priorityCeilingProtocol: enables priority ceiling for this resource</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType abstract="true" name="Scheduler">
    <xsd:annotation>
      <xsd:documentation>scheduling Algorithm: The used algorithm for scheduling
schedulingUnit: The unit that performs the scheduling algorithm, this can be a hardware or software unit</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="am:ReferableBaseObject">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="schedulingUnit" type="am:SchedulingUnit"/>
        </xsd:choice>
        <xsd:attribute name="scheduleUnitPriority" type="xsd:int"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="Scheduler" type="am:Scheduler">
    <xsd:annotation>
      <xsd:documentation>scheduling Algorithm: The used algorithm for scheduling
schedulingUnit: The unit that performs the scheduling algorithm, this can be a hardware or software unit</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType abstract="true" name="InterruptSchedulingAlgorithm">
    <xsd:annotation>
      <xsd:documentation>Interrupt Scheduling Algorithm
these are the different scheduling algorithms</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="am:BaseObject"/>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="InterruptSchedulingAlgorithm" type="am:InterruptSchedulingAlgorithm">
    <xsd:annotation>
      <xsd:documentation>Interrupt Scheduling Algorithm
these are the different scheduling algorithms</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType abstract="true" name="TaskSchedulingAlgorithm">
    <xsd:annotation>
      <xsd:documentation>Task Scheduling Algorithm
these are the different scheduling algorithms</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="am:BaseObject"/>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="TaskSchedulingAlgorithm" type="am:TaskSchedulingAlgorithm">
    <xsd:annotation>
      <xsd:documentation>Task Scheduling Algorithm
these are the different scheduling algorithms</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="OSEK">
    <xsd:annotation>
      <xsd:documentation>Priority based scheduling algorithm</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="am:TaskSchedulingAlgorithm"/>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="OSEK" type="am:OSEK">
    <xsd:annotation>
      <xsd:documentation>Priority based scheduling algorithm</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="PartlyPFairPD2">
    <xsd:annotation>
      <xsd:documentation>global scheduling algorithm</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="am:TaskSchedulingAlgorithm">
        <xsd:attribute name="quantSizeNs" type="xsd:int"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="PartlyPFairPD2" type="am:PartlyPFairPD2">
    <xsd:annotation>
      <xsd:documentation>global scheduling algorithm</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="PfairPD2">
    <xsd:annotation>
      <xsd:documentation>global scheduling algorithm</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="am:TaskSchedulingAlgorithm">
        <xsd:attribute name="quantSizeNs" type="xsd:int"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="PfairPD2" type="am:PfairPD2">
    <xsd:annotation>
      <xsd:documentation>global scheduling algorithm</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="PartlyEarlyReleaseFairPD2">
    <xsd:annotation>
      <xsd:documentation>global scheduling algorithm</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="am:TaskSchedulingAlgorithm">
        <xsd:attribute name="quantSizeNs" type="xsd:int"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="PartlyEarlyReleaseFairPD2" type="am:PartlyEarlyReleaseFairPD2">
    <xsd:annotation>
      <xsd:documentation>global scheduling algorithm</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="EarlyReleaseFairPD2">
    <xsd:annotation>
      <xsd:documentation>global scheduling algorithm</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="am:TaskSchedulingAlgorithm">
        <xsd:attribute name="quantSizeNs" type="xsd:int"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="EarlyReleaseFairPD2" type="am:EarlyReleaseFairPD2">
    <xsd:annotation>
      <xsd:documentation>global scheduling algorithm</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="LeastLocalRemainingExecutionTimeFirst">
    <xsd:annotation>
      <xsd:documentation>global scheduling algorithm</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="am:TaskSchedulingAlgorithm"/>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="LeastLocalRemainingExecutionTimeFirst" type="am:LeastLocalRemainingExecutionTimeFirst">
    <xsd:annotation>
      <xsd:documentation>global scheduling algorithm</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="EarliestDeadlineFirst">
    <xsd:annotation>
      <xsd:documentation>earliest absolute deadline first</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="am:TaskSchedulingAlgorithm"/>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="EarliestDeadlineFirst" type="am:EarliestDeadlineFirst">
    <xsd:annotation>
      <xsd:documentation>earliest absolute deadline first</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="DeadlineMonotonic">
    <xsd:annotation>
      <xsd:documentation>task with shortest deadline has highest priority</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="am:TaskSchedulingAlgorithm"/>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="DeadlineMonotonic" type="am:DeadlineMonotonic">
    <xsd:annotation>
      <xsd:documentation>task with shortest deadline has highest priority</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="RateMonotonic">
    <xsd:annotation>
      <xsd:documentation>task with shortest recurrence (i.e. period) has highest priority</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="am:TaskSchedulingAlgorithm"/>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="RateMonotonic" type="am:RateMonotonic">
    <xsd:annotation>
      <xsd:documentation>task with shortest recurrence (i.e. period) has highest priority</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="PriorityBasedRoundRobin">
    <xsd:annotation>
      <xsd:documentation>all tasks with equal priority executed for certain time slice</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="am:TaskSchedulingAlgorithm"/>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="PriorityBasedRoundRobin" type="am:PriorityBasedRoundRobin">
    <xsd:annotation>
      <xsd:documentation>all tasks with equal priority executed for certain time slice</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="UserSpecificSchedulingAlgorithm">
    <xsd:annotation>
      <xsd:documentation>allows the user to define own scheduling algorithm (TA-Toolsuite feature)</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="am:TaskSchedulingAlgorithm">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="parameter" type="am:AlgorithmParameter"/>
        </xsd:choice>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="UserSpecificSchedulingAlgorithm" type="am:UserSpecificSchedulingAlgorithm">
    <xsd:annotation>
      <xsd:documentation>allows the user to define own scheduling algorithm (TA-Toolsuite feature)</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="PriorityBased">
    <xsd:annotation>
      <xsd:documentation>Priority based Scheduling Algorithm for Interrupts</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="am:InterruptSchedulingAlgorithm"/>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="PriorityBased" type="am:PriorityBased">
    <xsd:annotation>
      <xsd:documentation>Priority based Scheduling Algorithm for Interrupts</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="AlgorithmParameter">
    <xsd:annotation>
      <xsd:documentation>parameter entry for UserSpecificSchedulingAlgorithm</xsd:documentation>
    </xsd:annotation>
    <xsd:choice maxOccurs="unbounded" minOccurs="0">
      <xsd:element ref="xmi:Extension"/>
    </xsd:choice>
    <xsd:attribute ref="xmi:id"/>
    <xsd:attributeGroup ref="xmi:ObjectAttribs"/>
    <xsd:attribute name="key" type="xsd:string"/>
    <xsd:attribute name="value" type="xsd:string"/>
  </xsd:complexType>
  <xsd:element name="AlgorithmParameter" type="am:AlgorithmParameter">
    <xsd:annotation>
      <xsd:documentation>parameter entry for UserSpecificSchedulingAlgorithm</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType abstract="true" name="SchedulingUnit">
    <xsd:annotation>
      <xsd:documentation>Scheduling Unit
see Scheduler</xsd:documentation>
    </xsd:annotation>
    <xsd:choice maxOccurs="unbounded" minOccurs="0">
      <xsd:element ref="xmi:Extension"/>
    </xsd:choice>
    <xsd:attribute ref="xmi:id"/>
    <xsd:attributeGroup ref="xmi:ObjectAttribs"/>
  </xsd:complexType>
  <xsd:element name="SchedulingUnit" type="am:SchedulingUnit">
    <xsd:annotation>
      <xsd:documentation>Scheduling Unit
see Scheduler</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="SchedulingHWUnit">
    <xsd:annotation>
      <xsd:documentation>Hardware scheduling unit is used in Scheduler when scheduling performs by hardware
Each schedule core requires a amount of time equal to delay to execute scheduling</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="am:SchedulingUnit">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="customProperties" type="am:CustomProperty"/>
          <xsd:element name="delay" type="am:Time"/>
        </xsd:choice>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="SchedulingHWUnit" type="am:SchedulingHWUnit">
    <xsd:annotation>
      <xsd:documentation>Hardware scheduling unit is used in Scheduler when scheduling performs by hardware
Each schedule core requires a amount of time equal to delay to execute scheduling</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="SchedulingSWUnit">
    <xsd:annotation>
      <xsd:documentation>The Software Scheduling Unit is used in a Scheduler when scheduling performs by Software
It describes an ISR that performs scheduling.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="am:SchedulingUnit">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="customProperties" type="am:CustomProperty"/>
          <xsd:element name="instructions" type="am:OsExecutionInstructions">
            <xsd:annotation>
              <xsd:documentation>The instructions of the scheduling ISR</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="interruptController" type="am:InterruptController">
            <xsd:annotation>
              <xsd:documentation>The Interrupt Controller that manages the scheduling ISR</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
        <xsd:attribute name="priority" type="xsd:int">
          <xsd:annotation>
            <xsd:documentation>The priority of the scheduling ISR</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="interruptController" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>The Interrupt Controller that manages the scheduling ISR</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="SchedulingSWUnit" type="am:SchedulingSWUnit">
    <xsd:annotation>
      <xsd:documentation>The Software Scheduling Unit is used in a Scheduler when scheduling performs by Software
It describes an ISR that performs scheduling.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="OperatingSystem">
    <xsd:complexContent>
      <xsd:extension base="am:BaseObject">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="overhead" type="am:OsInstructions"/>
          <xsd:element name="taskSchedulers" type="am:TaskScheduler"/>
          <xsd:element name="interruptControllers" type="am:InterruptController"/>
        </xsd:choice>
        <xsd:attribute name="name" type="xsd:string"/>
        <xsd:attribute name="overhead" type="xsd:string"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="OperatingSystem" type="am:OperatingSystem"/>
  <xsd:complexType name="VendorOperatingSystem">
    <xsd:complexContent>
      <xsd:extension base="am:OperatingSystem">
        <xsd:attribute name="osName" type="xsd:string"/>
        <xsd:attribute name="vendor" type="xsd:string"/>
        <xsd:attribute name="version" type="xsd:string"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="VendorOperatingSystem" type="am:VendorOperatingSystem"/>
  <xsd:complexType name="TaskScheduler">
    <xsd:complexContent>
      <xsd:extension base="am:Scheduler">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="schedulingAlgorithm" type="am:TaskSchedulingAlgorithm"/>
        </xsd:choice>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="TaskScheduler" type="am:TaskScheduler"/>
  <xsd:complexType name="InterruptController">
    <xsd:complexContent>
      <xsd:extension base="am:Scheduler">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="schedulingAlgorithm" type="am:InterruptSchedulingAlgorithm"/>
        </xsd:choice>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="InterruptController" type="am:InterruptController"/>
  <xsd:complexType name="OsInstructions">
    <xsd:complexContent>
      <xsd:extension base="am:ReferableBaseObject">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="apiOverhead" type="am:OsAPIInstructions"/>
          <xsd:element name="isrCategory1Overhead" type="am:OsISRInstructions"/>
          <xsd:element name="isrCategory2Overhead" type="am:OsISRInstructions"/>
        </xsd:choice>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="OsInstructions" type="am:OsInstructions"/>
  <xsd:complexType name="OsAPIInstructions">
    <xsd:complexContent>
      <xsd:extension base="am:BaseObject">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="apiSendMessage" type="am:OsExecutionInstructions"/>
          <xsd:element name="apiTerminateTask" type="am:OsExecutionInstructions"/>
          <xsd:element name="apiSchedule" type="am:OsExecutionInstructions"/>
          <xsd:element name="apiRequestResource" type="am:OsExecutionInstructions"/>
          <xsd:element name="apiReleaseResource" type="am:OsExecutionInstructions"/>
          <xsd:element name="apiSetEvent" type="am:OsExecutionInstructions"/>
          <xsd:element name="apiWaitEvent" type="am:OsExecutionInstructions"/>
          <xsd:element name="apiClearEvent" type="am:OsExecutionInstructions"/>
          <xsd:element name="apiActivateTask" type="am:OsExecutionInstructions"/>
          <xsd:element name="apiEnforcedMigration" type="am:OsExecutionInstructions"/>
        </xsd:choice>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="OsAPIInstructions" type="am:OsAPIInstructions"/>
  <xsd:complexType name="OsISRInstructions">
    <xsd:complexContent>
      <xsd:extension base="am:BaseObject">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="preExecutionOverhead" type="am:OsExecutionInstructions"/>
          <xsd:element name="postExecutionOverhead" type="am:OsExecutionInstructions"/>
        </xsd:choice>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="OsISRInstructions" type="am:OsISRInstructions"/>
  <xsd:complexType abstract="true" name="OsExecutionInstructions">
    <xsd:choice maxOccurs="unbounded" minOccurs="0">
      <xsd:element ref="xmi:Extension"/>
    </xsd:choice>
    <xsd:attribute ref="xmi:id"/>
    <xsd:attributeGroup ref="xmi:ObjectAttribs"/>
  </xsd:complexType>
  <xsd:element name="OsExecutionInstructions" type="am:OsExecutionInstructions"/>
  <xsd:complexType name="OsExecutionInstructionsDeviation">
    <xsd:annotation>
      <xsd:documentation>Represents a deviated set of execution cycles</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="am:OsExecutionInstructions">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="customProperties" type="am:CustomProperty"/>
          <xsd:element name="deviation" type="am:Deviation"/>
        </xsd:choice>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="OsExecutionInstructionsDeviation" type="am:OsExecutionInstructionsDeviation">
    <xsd:annotation>
      <xsd:documentation>Represents a deviated set of execution cycles</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="OsExecutionInstructionsConstant">
    <xsd:annotation>
      <xsd:documentation>Represents a constant set of execution cycles</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="am:OsExecutionInstructions">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="customProperties" type="am:CustomProperty"/>
        </xsd:choice>
        <xsd:attribute name="value" type="xsd:long"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="OsExecutionInstructionsConstant" type="am:OsExecutionInstructionsConstant">
    <xsd:annotation>
      <xsd:documentation>Represents a constant set of execution cycles</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="PropertyConstraintsModel">
    <xsd:annotation>
      <xsd:documentation>*
===============================================================================
===============================================================================

								Property Constraints Model

===============================================================================
===============================================================================</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="am:BaseObject">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="allocationConstraints" type="am:AllocationConstraint"/>
          <xsd:element name="mappingConstraints" type="am:MappingConstraint"/>
          <xsd:element name="coreTypeDefinitions" type="am:CoreType"/>
          <xsd:element name="memoryTypeDefinitions" type="am:MemoryType"/>
        </xsd:choice>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="PropertyConstraintsModel" type="am:PropertyConstraintsModel">
    <xsd:annotation>
      <xsd:documentation>*
===============================================================================
===============================================================================

								Property Constraints Model

===============================================================================
===============================================================================</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType abstract="true" name="AllocationConstraint">
    <xsd:annotation>
      <xsd:documentation>abstract class Constraint {
	// reference: Software Component
	// containment: List of HW Features or Components we need
}</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="am:BaseObject">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="hwConstraint" type="am:HwCoreConstraint"/>
        </xsd:choice>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="AllocationConstraint" type="am:AllocationConstraint">
    <xsd:annotation>
      <xsd:documentation>abstract class Constraint {
	// reference: Software Component
	// containment: List of HW Features or Components we need
}</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType abstract="true" name="MappingConstraint">
    <xsd:annotation>
      <xsd:documentation>Abstract Class, used to describe Constraints for Mapping
(these usually target Memories and their features/attributes)</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="am:BaseObject">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="hwConstraint" type="am:HwMemoryConstraint"/>
        </xsd:choice>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="MappingConstraint" type="am:MappingConstraint">
    <xsd:annotation>
      <xsd:documentation>Abstract Class, used to describe Constraints for Mapping
(these usually target Memories and their features/attributes)</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="ProcessAllocationConstraint">
    <xsd:annotation>
      <xsd:documentation>ProcessAllocationConstraints describe the constraints for
Process-to-Core allocations</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="am:AllocationConstraint">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="process" type="am:Process"/>
        </xsd:choice>
        <xsd:attribute name="process" type="xsd:string"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="ProcessAllocationConstraint" type="am:ProcessAllocationConstraint">
    <xsd:annotation>
      <xsd:documentation>ProcessAllocationConstraints describe the constraints for
Process-to-Core allocations</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="ProcessPrototypeAllocationConstraint">
    <xsd:annotation>
      <xsd:documentation>ProcessPrototypeAllocationConstraints describe the constraints for
ProcessPrototype-to-Core allocations</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="am:AllocationConstraint">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="processPrototype" type="am:ProcessPrototype"/>
        </xsd:choice>
        <xsd:attribute name="processPrototype" type="xsd:string"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="ProcessPrototypeAllocationConstraint" type="am:ProcessPrototypeAllocationConstraint">
    <xsd:annotation>
      <xsd:documentation>ProcessPrototypeAllocationConstraints describe the constraints for
ProcessPrototype-to-Core allocations</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="RunnableAllocationConstraint">
    <xsd:annotation>
      <xsd:documentation>RunnableAllocationConstraints describe the constraints for
Runnable-to-Core allocations</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="am:AllocationConstraint">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="runnable" type="am:Runnable"/>
        </xsd:choice>
        <xsd:attribute name="runnable" type="xsd:string"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="RunnableAllocationConstraint" type="am:RunnableAllocationConstraint">
    <xsd:annotation>
      <xsd:documentation>RunnableAllocationConstraints describe the constraints for
Runnable-to-Core allocations</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="SectionMappingConstraint">
    <xsd:annotation>
      <xsd:documentation>SectionMappingConstraints describe the constraints for Section-to-Memory
Mapping</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="am:MappingConstraint">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="section" type="am:Section"/>
        </xsd:choice>
        <xsd:attribute name="section" type="xsd:string"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="SectionMappingConstraint" type="am:SectionMappingConstraint">
    <xsd:annotation>
      <xsd:documentation>SectionMappingConstraints describe the constraints for Section-to-Memory
Mapping</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="AbstractElementMappingConstraint">
    <xsd:annotation>
      <xsd:documentation>AbstractElementMappingConstraints describe the constraints for
AbstractElementMemoryInformation-to-Memory Mapping</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="am:MappingConstraint">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="abstractElement" type="am:AbstractElementMemoryInformation"/>
        </xsd:choice>
        <xsd:attribute name="abstractElement" type="xsd:string"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="AbstractElementMappingConstraint" type="am:AbstractElementMappingConstraint">
    <xsd:annotation>
      <xsd:documentation>AbstractElementMappingConstraints describe the constraints for
AbstractElementMemoryInformation-to-Memory Mapping</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType abstract="true" name="HwCoreConstraint">
    <xsd:annotation>
      <xsd:documentation>Generalization for all Hardware related constraints</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="am:BaseObject"/>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="HwCoreConstraint" type="am:HwCoreConstraint">
    <xsd:annotation>
      <xsd:documentation>Generalization for all Hardware related constraints</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType abstract="true" name="HwMemoryConstraint">
    <xsd:complexContent>
      <xsd:extension base="am:BaseObject"/>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="HwMemoryConstraint" type="am:HwMemoryConstraint"/>
  <xsd:complexType name="HwCoreProperty">
    <xsd:annotation>
      <xsd:documentation>Core-Constraints for describing the least amount of properties which are required by
executables.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="am:HwCoreConstraint">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="core" type="am:Core"/>
        </xsd:choice>
        <xsd:attribute name="comparator" type="am:ComparatorType"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="HwCoreProperty" type="am:HwCoreProperty">
    <xsd:annotation>
      <xsd:documentation>Core-Constraints for describing the least amount of properties which are required by
executables.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="HwCoreConjunction">
    <xsd:complexContent>
      <xsd:extension base="am:HwCoreConstraint">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="firstConstraint" type="am:HwCoreConstraint"/>
          <xsd:element name="secondConstraint" type="am:HwCoreConstraint"/>
        </xsd:choice>
        <xsd:attribute name="conjunction" type="am:ConjunctionType"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="HwCoreConjunction" type="am:HwCoreConjunction"/>
  <xsd:complexType name="HwMemoryProperty">
    <xsd:annotation>
      <xsd:documentation>Memory-Constraints for describing the least amount of properties which are required by
data.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="am:HwMemoryConstraint">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="memory" type="am:Memory"/>
        </xsd:choice>
        <xsd:attribute name="comparator" type="am:ComparatorType"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="HwMemoryProperty" type="am:HwMemoryProperty">
    <xsd:annotation>
      <xsd:documentation>Memory-Constraints for describing the least amount of properties which are required by
data.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="HwMemoryConjunction">
    <xsd:complexContent>
      <xsd:extension base="am:HwMemoryConstraint">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="firstConstraint" type="am:HwMemoryConstraint"/>
          <xsd:element name="secondConstraint" type="am:HwMemoryConstraint"/>
        </xsd:choice>
        <xsd:attribute name="conjunction" type="am:ConjunctionType"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="HwMemoryConjunction" type="am:HwMemoryConjunction"/>
  <xsd:complexType name="StimuliModel">
    <xsd:annotation>
      <xsd:documentation>*
===============================================================================
===============================================================================

								Stimuli Model

===============================================================================
===============================================================================</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="am:BaseObject">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="stimuli" type="am:Stimulus"/>
          <xsd:element name="clocks" type="am:Clock"/>
        </xsd:choice>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="StimuliModel" type="am:StimuliModel">
    <xsd:annotation>
      <xsd:documentation>*
===============================================================================
===============================================================================

								Stimuli Model

===============================================================================
===============================================================================</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType abstract="true" name="Stimulus">
    <xsd:annotation>
      <xsd:documentation>Every process/task can have one or more stimuli
A stimulus activates the process
deviationStimulus: defines the deviation of the activation times of the stimulus</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="am:ReferableBaseObject">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="stimulusDeviation" type="am:Deviation"/>
          <xsd:element name="setModeValueList" type="am:ModeValueList"/>
          <xsd:element name="enablingModeValueList" type="am:ModeValueList"/>
          <xsd:element name="disablingModeValueList" type="am:ModeValueList"/>
        </xsd:choice>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="Stimulus" type="am:Stimulus">
    <xsd:annotation>
      <xsd:documentation>Every process/task can have one or more stimuli
A stimulus activates the process
deviationStimulus: defines the deviation of the activation times of the stimulus</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="ModeValueList">
    <xsd:complexContent>
      <xsd:extension base="am:BaseObject">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="entries" type="am:ModeValueListEntry"/>
        </xsd:choice>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="ModeValueList" type="am:ModeValueList"/>
  <xsd:complexType name="ModeValueListEntry">
    <xsd:complexContent>
      <xsd:extension base="am:BaseObject">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="valueProvider" type="am:ModeValueProvider"/>
          <xsd:element name="value" type="am:ModeLiteral"/>
        </xsd:choice>
        <xsd:attribute name="valueProvider" type="xsd:string"/>
        <xsd:attribute name="value" type="xsd:string"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="ModeValueListEntry" type="am:ModeValueListEntry"/>
  <xsd:complexType name="Periodic">
    <xsd:annotation>
      <xsd:documentation>This activates a task periodically
offset: Time of first activation
recurrence: Time between following activations
clock: Time base which defines deviation of time, multiple stimuli can have the same time base</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="am:Stimulus">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="offset" type="am:Time"/>
          <xsd:element name="recurrence" type="am:Time"/>
          <xsd:element name="clock" type="am:Clock"/>
        </xsd:choice>
        <xsd:attribute name="clock" type="xsd:string"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="Periodic" type="am:Periodic">
    <xsd:annotation>
      <xsd:documentation>This activates a task periodically
offset: Time of first activation
recurrence: Time between following activations
clock: Time base which defines deviation of time, multiple stimuli can have the same time base</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="PeriodicEvent">
    <xsd:annotation>
      <xsd:documentation>Periodic avtivation based on other events, like rotation speed dependency</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="am:Stimulus"/>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="PeriodicEvent" type="am:PeriodicEvent">
    <xsd:annotation>
      <xsd:documentation>Periodic avtivation based on other events, like rotation speed dependency</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="CustomStimulus">
    <xsd:annotation>
      <xsd:documentation>Stimulus to describe own custom types of activations, including properties</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="am:Stimulus"/>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="CustomStimulus" type="am:CustomStimulus">
    <xsd:annotation>
      <xsd:documentation>Stimulus to describe own custom types of activations, including properties</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="Single">
    <xsd:annotation>
      <xsd:documentation>Single scheduling event at a defined time.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="am:Stimulus">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="activation" type="am:Time"/>
        </xsd:choice>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="Single" type="am:Single">
    <xsd:annotation>
      <xsd:documentation>Single scheduling event at a defined time.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="InterProcess">
    <xsd:annotation>
      <xsd:documentation>Defines activation based on a explicit inter process activation.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="am:Stimulus"/>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="InterProcess" type="am:InterProcess">
    <xsd:annotation>
      <xsd:documentation>Defines activation based on a explicit inter process activation.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="Sporadic">
    <xsd:annotation>
      <xsd:documentation>Stimulus for sporadic activation of task</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="am:Stimulus"/>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="Sporadic" type="am:Sporadic">
    <xsd:annotation>
      <xsd:documentation>Stimulus for sporadic activation of task</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="ArrivalCurve">
    <xsd:annotation>
      <xsd:documentation>Arrival Curve Stimulus</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="am:Stimulus">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="arrivalCurveEntries" type="am:ArrivalCurveEntry"/>
        </xsd:choice>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="ArrivalCurve" type="am:ArrivalCurve">
    <xsd:annotation>
      <xsd:documentation>Arrival Curve Stimulus</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="ArrivalCurveEntry">
    <xsd:complexContent>
      <xsd:extension base="am:BaseObject">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="lowerTimeBorder" type="am:Time"/>
          <xsd:element name="upperTimeBorder" type="am:Time"/>
        </xsd:choice>
        <xsd:attribute name="numberOfEvents" type="xsd:int"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="ArrivalCurveEntry" type="am:ArrivalCurveEntry"/>
  <xsd:complexType abstract="true" name="Clock">
    <xsd:annotation>
      <xsd:documentation>This is the time base for one or more periodic stimuli
A clock defines the time of its stimuli.
The faster the clock, the faster stimuli</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="am:ReferableBaseObject"/>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="Clock" type="am:Clock">
    <xsd:annotation>
      <xsd:documentation>This is the time base for one or more periodic stimuli
A clock defines the time of its stimuli.
The faster the clock, the faster stimuli</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="ClockTriangleFunction">
    <xsd:complexContent>
      <xsd:extension base="am:Clock">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="shift" type="am:SignedTime"/>
          <xsd:element name="period" type="am:Time"/>
        </xsd:choice>
        <xsd:attribute name="max" type="xsd:double"/>
        <xsd:attribute name="min" type="xsd:double"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="ClockTriangleFunction" type="am:ClockTriangleFunction"/>
  <xsd:complexType name="ClockSinusFunction">
    <xsd:complexContent>
      <xsd:extension base="am:Clock">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="shift" type="am:SignedTime"/>
          <xsd:element name="period" type="am:Time"/>
        </xsd:choice>
        <xsd:attribute name="amplitude" type="xsd:double"/>
        <xsd:attribute name="yOffset" type="xsd:double"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="ClockSinusFunction" type="am:ClockSinusFunction"/>
  <xsd:complexType name="ClockMultiplierList">
    <xsd:annotation>
      <xsd:documentation>A list of timestamp-value pairs
At the specified timestamp, the clock changes to the corresponding value</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="am:Clock">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="entries" type="am:ClockMultiplierListEntry"/>
        </xsd:choice>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="ClockMultiplierList" type="am:ClockMultiplierList">
    <xsd:annotation>
      <xsd:documentation>A list of timestamp-value pairs
At the specified timestamp, the clock changes to the corresponding value</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="ClockMultiplierListEntry">
    <xsd:annotation>
      <xsd:documentation>A timestamp-value par for ClockMultiplierList</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="am:BaseObject">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="time" type="am:Time"/>
        </xsd:choice>
        <xsd:attribute name="multiplier" type="xsd:double"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="ClockMultiplierListEntry" type="am:ClockMultiplierListEntry">
    <xsd:annotation>
      <xsd:documentation>A timestamp-value par for ClockMultiplierList</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="SWModel">
    <xsd:annotation>
      <xsd:documentation>*
===============================================================================
===============================================================================

								SW Model

===============================================================================
===============================================================================</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="am:BaseObject">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="isrs" type="am:ISR"/>
          <xsd:element name="tasks" type="am:Task"/>
          <xsd:element name="runnables" type="am:Runnable"/>
          <xsd:element name="labels" type="am:Label"/>
          <xsd:element name="processPrototypes" type="am:ProcessPrototype"/>
          <xsd:element name="sections" type="am:Section"/>
          <xsd:element name="activations" type="am:Activation"/>
          <xsd:element name="tags" type="am:Tag"/>
          <xsd:element name="events" type="am:OsEvent"/>
          <xsd:element name="typeDefinitions" type="am:TypeDefinition"/>
          <xsd:element name="customEntities" type="am:CustomEntity"/>
          <xsd:element name="processChains" type="am:ProcessChain"/>
          <xsd:element name="modes" type="am:Mode"/>
          <xsd:element name="modeLabels" type="am:ModeLabel"/>
        </xsd:choice>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="SWModel" type="am:SWModel">
    <xsd:annotation>
      <xsd:documentation>*
===============================================================================
===============================================================================

								SW Model

===============================================================================
===============================================================================</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType abstract="true" name="AbstractElementMemoryInformation">
    <xsd:complexContent>
      <xsd:extension base="am:ReferableBaseObject">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="tags" type="am:Tag"/>
          <xsd:element name="size" type="am:DataUnit">
            <xsd:annotation>
              <xsd:documentation>Specifying the size of the element corresponding to the needed memory allocation</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
        <xsd:attribute name="tags" type="xsd:string"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="AbstractElementMemoryInformation" type="am:AbstractElementMemoryInformation"/>
  <xsd:complexType abstract="true" name="AbstractProcess">
    <xsd:complexContent>
      <xsd:extension base="am:AbstractElementMemoryInformation">
        <xsd:attribute name="priority" type="xsd:int"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="AbstractProcess" type="am:AbstractProcess"/>
  <xsd:complexType name="CustomEntity">
    <xsd:annotation>
      <xsd:documentation>Possibility to define general custom elements</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="am:AbstractElementMemoryInformation">
        <xsd:attribute name="typeName" type="xsd:string"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="CustomEntity" type="am:CustomEntity">
    <xsd:annotation>
      <xsd:documentation>Possibility to define general custom elements</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="ProcessChain">
    <xsd:annotation>
      <xsd:documentation>Groups a list of processes to a process chain.
This does not define how the processes are chained, like beeing executed by one parent or like they trigger each other (therfore Enforced Migration is used)
This just defines that the processes should be chained.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="am:ReferableBaseObject">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="processes" type="am:Process"/>
        </xsd:choice>
        <xsd:attribute name="processes" type="xsd:string"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="ProcessChain" type="am:ProcessChain">
    <xsd:annotation>
      <xsd:documentation>Groups a list of processes to a process chain.
This does not define how the processes are chained, like beeing executed by one parent or like they trigger each other (therfore Enforced Migration is used)
This just defines that the processes should be chained.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType abstract="true" name="Process">
    <xsd:annotation>
      <xsd:documentation>TODO: Refine name of element
Generalizes interrupt service routines and tasks</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="am:AbstractProcess">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="callGraph" type="am:CallGraph"/>
          <xsd:element name="stimuli" type="am:Stimulus"/>
        </xsd:choice>
        <xsd:attribute name="stimuli" type="xsd:string"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="Process" type="am:Process">
    <xsd:annotation>
      <xsd:documentation>TODO: Refine name of element
Generalizes interrupt service routines and tasks</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="CallGraph">
    <xsd:annotation>
      <xsd:documentation>Describes the different execution paths of a process</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="am:BaseObject">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="graphEntries" type="am:GraphEntryBase"/>
        </xsd:choice>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="CallGraph" type="am:CallGraph">
    <xsd:annotation>
      <xsd:documentation>Describes the different execution paths of a process</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType abstract="true" name="GraphEntryBase">
    <xsd:annotation>
      <xsd:documentation>A abstract entry for a call graph</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="am:BaseObject"/>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="GraphEntryBase" type="am:GraphEntryBase">
    <xsd:annotation>
      <xsd:documentation>A abstract entry for a call graph</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="CallSequence">
    <xsd:annotation>
      <xsd:documentation>A sequence of callable items that can be placed in the call graph</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="am:GraphEntryBase">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="calls" type="am:CallSequenceItem"/>
        </xsd:choice>
        <xsd:attribute name="name" type="xsd:string"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="CallSequence" type="am:CallSequence">
    <xsd:annotation>
      <xsd:documentation>A sequence of callable items that can be placed in the call graph</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="ModeSwitch">
    <xsd:annotation>
      <xsd:documentation>A switch in the call graph, the selected path depends on a label�s value</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="am:GraphEntryBase">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="valueProvider" type="am:ModeValueProvider"/>
          <xsd:element name="entries" type="am:ModeSwitchEntry"/>
        </xsd:choice>
        <xsd:attribute name="valueProvider" type="xsd:string"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="ModeSwitch" type="am:ModeSwitch">
    <xsd:annotation>
      <xsd:documentation>A switch in the call graph, the selected path depends on a label�s value</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="ModeSwitchEntry">
    <xsd:annotation>
      <xsd:documentation>A switch entry for a LabelSwitch.
It describes a path of the switch and the required label value to use this path</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="am:BaseObject">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="value" type="am:ModeLiteral"/>
          <xsd:element name="graphEntries" type="am:GraphEntryBase"/>
        </xsd:choice>
        <xsd:attribute name="default" type="xsd:boolean"/>
        <xsd:attribute name="value" type="xsd:string"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="ModeSwitchEntry" type="am:ModeSwitchEntry">
    <xsd:annotation>
      <xsd:documentation>A switch entry for a LabelSwitch.
It describes a path of the switch and the required label value to use this path</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="ProbabiltitySwitch">
    <xsd:annotation>
      <xsd:documentation>A switch in the call graph, each path has a probability</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="am:GraphEntryBase">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="entries" type="am:ProbabilitySwitchEntry"/>
        </xsd:choice>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="ProbabiltitySwitch" type="am:ProbabiltitySwitch">
    <xsd:annotation>
      <xsd:documentation>A switch in the call graph, each path has a probability</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="ProbabilitySwitchEntry">
    <xsd:annotation>
      <xsd:documentation>A switch entry for a ProbabiltitySwitch
It describes a path of the switch and it's probability</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="am:BaseObject">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="graphEntries" type="am:GraphEntryBase"/>
        </xsd:choice>
        <xsd:attribute name="probability" type="xsd:double"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="ProbabilitySwitchEntry" type="am:ProbabilitySwitchEntry">
    <xsd:annotation>
      <xsd:documentation>A switch entry for a ProbabiltitySwitch
It describes a path of the switch and it's probability</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="Counter">
    <xsd:annotation>
      <xsd:documentation>A counter for the call sequence items</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="am:BaseObject">
        <xsd:attribute name="offset" type="xsd:long"/>
        <xsd:attribute name="prescaler" type="xsd:long"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="Counter" type="am:Counter">
    <xsd:annotation>
      <xsd:documentation>A counter for the call sequence items</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType abstract="true" name="CallSequenceItem">
    <xsd:annotation>
      <xsd:documentation>Generalizes task calls</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="am:BaseObject">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="counter" type="am:Counter"/>
        </xsd:choice>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="CallSequenceItem" type="am:CallSequenceItem">
    <xsd:annotation>
      <xsd:documentation>Generalizes task calls</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="WaitEvent">
    <xsd:annotation>
      <xsd:documentation>Let the process wait for a combination of events defined by eventMask
maskType defines if the events in eventMask are linked by a AND or OR</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="am:CallSequenceItem">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="eventMask" type="am:EventMask"/>
        </xsd:choice>
        <xsd:attribute name="maskType" type="am:WaitEventType"/>
        <xsd:attribute name="waitingBehaviour" type="am:WaitingBehaviour"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="WaitEvent" type="am:WaitEvent">
    <xsd:annotation>
      <xsd:documentation>Let the process wait for a combination of events defined by eventMask
maskType defines if the events in eventMask are linked by a AND or OR</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="SetEvent">
    <xsd:annotation>
      <xsd:documentation>Sets the events of eventMask
These events can be set for a specific process, if there is no process, is is global (for all processes)
If there is a process, it is possible to set the event for a specific process instance that is currently activated</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="am:CallSequenceItem">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="eventMask" type="am:EventMask"/>
          <xsd:element name="process" type="am:Process"/>
        </xsd:choice>
        <xsd:attribute name="process" type="xsd:string"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="SetEvent" type="am:SetEvent">
    <xsd:annotation>
      <xsd:documentation>Sets the events of eventMask
These events can be set for a specific process, if there is no process, is is global (for all processes)
If there is a process, it is possible to set the event for a specific process instance that is currently activated</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="ClearEvent">
    <xsd:annotation>
      <xsd:documentation>Clears the events of eventMask</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="am:CallSequenceItem">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="eventMask" type="am:EventMask"/>
        </xsd:choice>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="ClearEvent" type="am:ClearEvent">
    <xsd:annotation>
      <xsd:documentation>Clears the events of eventMask</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="EventMask">
    <xsd:annotation>
      <xsd:documentation>A event mask</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="am:BaseObject">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="events" type="am:OsEvent"/>
        </xsd:choice>
        <xsd:attribute name="events" type="xsd:string"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="EventMask" type="am:EventMask">
    <xsd:annotation>
      <xsd:documentation>A event mask</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="OsEvent">
    <xsd:annotation>
      <xsd:documentation>A event that can be set, cleared and waited for by a process</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="am:ReferableBaseObject">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="tags" type="am:Tag"/>
        </xsd:choice>
        <xsd:attribute name="tags" type="xsd:string"/>
        <xsd:attribute name="communicationOverheadInBit" type="xsd:int"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="OsEvent" type="am:OsEvent">
    <xsd:annotation>
      <xsd:documentation>A event that can be set, cleared and waited for by a process</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="InterProcessActivation">
    <xsd:annotation>
      <xsd:documentation>Triggers a stimulus to activate its processes</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="am:CallSequenceItem">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="stimulus" type="am:Stimulus"/>
        </xsd:choice>
        <xsd:attribute name="stimulus" type="xsd:string"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="InterProcessActivation" type="am:InterProcessActivation">
    <xsd:annotation>
      <xsd:documentation>Triggers a stimulus to activate its processes</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="EnforcedMigration">
    <xsd:annotation>
      <xsd:documentation>Migrates task to core of resource owner</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="am:CallSequenceItem">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="resourceOwner" type="am:Scheduler"/>
        </xsd:choice>
        <xsd:attribute name="resourceOwner" type="xsd:string"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="EnforcedMigration" type="am:EnforcedMigration">
    <xsd:annotation>
      <xsd:documentation>Migrates task to core of resource owner</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="TaskRunnableCall">
    <xsd:annotation>
      <xsd:documentation>Executes a runnable</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="am:CallSequenceItem">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="runnable" type="am:Runnable"/>
          <xsd:element name="statistic" type="am:RunEntityCallStatistic"/>
        </xsd:choice>
        <xsd:attribute name="runnable" type="xsd:string"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="TaskRunnableCall" type="am:TaskRunnableCall">
    <xsd:annotation>
      <xsd:documentation>Executes a runnable</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="SchedulePoint">
    <xsd:annotation>
      <xsd:documentation>Triggers scheduler</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="am:CallSequenceItem"/>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="SchedulePoint" type="am:SchedulePoint">
    <xsd:annotation>
      <xsd:documentation>Triggers scheduler</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="TerminateProcess">
    <xsd:annotation>
      <xsd:documentation>Terminates the process</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="am:CallSequenceItem"/>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="TerminateProcess" type="am:TerminateProcess">
    <xsd:annotation>
      <xsd:documentation>Terminates the process</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="Task">
    <xsd:annotation>
      <xsd:documentation>Schedulable entity, which is managed by the OS. An instance of a Task is mapped to exactly one core
and includes the direct representation of all abstractions.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="am:Process">
        <xsd:attribute name="preemption" type="am:Preemption"/>
        <xsd:attribute name="multipleTaskActivationLimit" type="xsd:int"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="Task" type="am:Task">
    <xsd:annotation>
      <xsd:documentation>Schedulable entity, which is managed by the OS. An instance of a Task is mapped to exactly one core
and includes the direct representation of all abstractions.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="ISR">
    <xsd:annotation>
      <xsd:documentation>Interrupt service routine</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="am:Process"/>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="ISR" type="am:ISR">
    <xsd:annotation>
      <xsd:documentation>Interrupt service routine</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="ProcessPrototype">
    <xsd:annotation>
      <xsd:documentation>Prototype class for Process.
It does contain meta information of potential processes, which does not represent the final state.
The final state can be several Tasks, which can be computed using provided information of this prototype.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="am:AbstractProcess">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="firstRunnable" type="am:Runnable"/>
          <xsd:element name="lastRunnable" type="am:Runnable"/>
          <xsd:element name="accessPrecedenceSpec" type="am:AccessPrecedenceSpec">
            <xsd:annotation>
              <xsd:documentation>Defines the general label accesses</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="orderPrecedenceSpec" type="am:OrderPrecedenceSpec">
            <xsd:annotation>
              <xsd:documentation>Defines the general order of runnables</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="chainedPrototypes" type="am:ChainedProcessPrototype"/>
          <xsd:element name="activation" type="am:Activation"/>
          <xsd:element name="runnableCalls" type="am:TaskRunnableCall"/>
        </xsd:choice>
        <xsd:attribute name="preemption" type="am:Preemption"/>
        <xsd:attribute name="firstRunnable" type="xsd:string"/>
        <xsd:attribute name="lastRunnable" type="xsd:string"/>
        <xsd:attribute name="activation" type="xsd:string"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="ProcessPrototype" type="am:ProcessPrototype">
    <xsd:annotation>
      <xsd:documentation>Prototype class for Process.
It does contain meta information of potential processes, which does not represent the final state.
The final state can be several Tasks, which can be computed using provided information of this prototype.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="ChainedProcessPrototype">
    <xsd:complexContent>
      <xsd:extension base="am:BaseObject">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="prototype" type="am:ProcessPrototype"/>
        </xsd:choice>
        <xsd:attribute name="apply" type="xsd:int"/>
        <xsd:attribute name="offset" type="xsd:int"/>
        <xsd:attribute name="prototype" type="xsd:string"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="ChainedProcessPrototype" type="am:ChainedProcessPrototype"/>
  <xsd:complexType abstract="true" name="GeneralPrecedence">
    <xsd:annotation>
      <xsd:documentation>General abstraction for precedence</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="am:BaseObject">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="origin" type="am:Runnable"/>
          <xsd:element name="target" type="am:Runnable"/>
        </xsd:choice>
        <xsd:attribute name="origin" type="xsd:string"/>
        <xsd:attribute name="target" type="xsd:string"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="GeneralPrecedence" type="am:GeneralPrecedence">
    <xsd:annotation>
      <xsd:documentation>General abstraction for precedence</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="AccessPrecedenceSpec">
    <xsd:complexContent>
      <xsd:extension base="am:GeneralPrecedence">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="label" type="am:Label"/>
        </xsd:choice>
        <xsd:attribute name="orderType" type="am:AccessPrecedenceType"/>
        <xsd:attribute name="label" type="xsd:string"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="AccessPrecedenceSpec" type="am:AccessPrecedenceSpec"/>
  <xsd:complexType name="OrderPrecedenceSpec">
    <xsd:complexContent>
      <xsd:extension base="am:GeneralPrecedence">
        <xsd:attribute name="orderType" type="am:OrderType"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="OrderPrecedenceSpec" type="am:OrderPrecedenceSpec"/>
  <xsd:complexType name="Runnable">
    <xsd:annotation>
      <xsd:documentation>Smallest allocatable unit, which provides additional (optional) attributes for allocation algorithms.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="am:AbstractElementMemoryInformation">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="runnableItems" type="am:RunnableItem"/>
          <xsd:element name="activation" type="am:Activation"/>
          <xsd:element name="deadline" type="am:Time">
            <xsd:annotation>
              <xsd:documentation>Optional parameter for allocation to task or time slice.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
        <xsd:attribute name="callback" type="xsd:boolean">
          <xsd:annotation>
            <xsd:documentation>Marker if runnable is used as callback.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="service" type="xsd:boolean">
          <xsd:annotation>
            <xsd:documentation>Marker if runnable is used as a service.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="activation" type="xsd:string"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="Runnable" type="am:Runnable">
    <xsd:annotation>
      <xsd:documentation>Smallest allocatable unit, which provides additional (optional) attributes for allocation algorithms.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="Label">
    <xsd:annotation>
      <xsd:documentation>Data representation, which can be accessed by run entities.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="am:AbstractElementMemoryInformation">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="dataType" type="am:DataType"/>
        </xsd:choice>
        <xsd:attribute name="constant" type="xsd:boolean">
          <xsd:annotation>
            <xsd:documentation>Defines the label as a constant, not modifiable entity</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="bVolatile" type="xsd:boolean">
          <xsd:annotation>
            <xsd:documentation>Defines if the label value is volatile or persistent to survive shutdown and start of system</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="buffered" type="am:LabelBuffering">
          <xsd:annotation>
            <xsd:documentation>Defines if the label is buffered or not</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="Label" type="am:Label">
    <xsd:annotation>
      <xsd:documentation>Data representation, which can be accessed by run entities.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="ModeLabel">
    <xsd:complexContent>
      <xsd:extension base="am:AbstractElementMemoryInformation">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="mode" type="am:Mode"/>
          <xsd:element name="initialValue" type="am:ModeLiteral"/>
        </xsd:choice>
        <xsd:attribute name="mode" type="xsd:string"/>
        <xsd:attribute name="initialValue" type="xsd:string"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="ModeLabel" type="am:ModeLabel"/>
  <xsd:complexType name="Section">
    <xsd:annotation>
      <xsd:documentation>A section is a logical structure, which contains labels and abstract run entities.
It is used to provide an easy mechanism to distribute objects to memory,
which are belonging together.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="am:ReferableBaseObject">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="size" type="am:DataUnit">
            <xsd:annotation>
              <xsd:documentation>Size of all contained objects</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="labels" type="am:Label"/>
          <xsd:element name="runEntities" type="am:Runnable"/>
        </xsd:choice>
        <xsd:attribute name="labels" type="xsd:string"/>
        <xsd:attribute name="runEntities" type="xsd:string"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="Section" type="am:Section">
    <xsd:annotation>
      <xsd:documentation>A section is a logical structure, which contains labels and abstract run entities.
It is used to provide an easy mechanism to distribute objects to memory,
which are belonging together.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType abstract="true" name="RunnableItem">
    <xsd:annotation>
      <xsd:documentation>Representation of a object that can be executed by a Runnable</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="am:BaseObject"/>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="RunnableItem" type="am:RunnableItem">
    <xsd:annotation>
      <xsd:documentation>Representation of a object that can be executed by a Runnable</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="ModeLabelAccess">
    <xsd:annotation>
      <xsd:documentation>Representation of a mode label access of a run entity.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="am:RunnableItem">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="data" type="am:ModeLabel"/>
          <xsd:element name="modeValue" type="am:ModeLiteral">
            <xsd:annotation>
              <xsd:documentation>Just used in case that this access writes a value to a Mode-Label.
It can be used to define which mode value is written to the label.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
        <xsd:attribute name="access" type="am:LabelAccessEnum"/>
        <xsd:attribute name="data" type="xsd:string"/>
        <xsd:attribute name="modeValue" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>Just used in case that this access writes a value to a Mode-Label.
It can be used to define which mode value is written to the label.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="ModeLabelAccess" type="am:ModeLabelAccess">
    <xsd:annotation>
      <xsd:documentation>Representation of a mode label access of a run entity.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="LabelAccess">
    <xsd:annotation>
      <xsd:documentation>Representation of a label access of a run entity.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="am:RunnableItem">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="data" type="am:Label"/>
          <xsd:element name="statistic" type="am:LabelAccessStatistic">
            <xsd:annotation>
              <xsd:documentation>Optional parameter for statistic values</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
        <xsd:attribute name="access" type="am:LabelAccessEnum"/>
        <xsd:attribute name="buffered" type="am:LabelAccessBuffering">
          <xsd:annotation>
            <xsd:documentation>Defines if the access to the label is buffered</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="data" type="xsd:string"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="LabelAccess" type="am:LabelAccess">
    <xsd:annotation>
      <xsd:documentation>Representation of a label access of a run entity.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="SemaphoreAccess">
    <xsd:annotation>
      <xsd:documentation>Describes an semaphore access</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="am:RunnableItem">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="semaphore" type="am:Semaphore"/>
        </xsd:choice>
        <xsd:attribute name="access" type="am:SemaphoreAccessEnum"/>
        <xsd:attribute name="semaphore" type="xsd:string"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="SemaphoreAccess" type="am:SemaphoreAccess">
    <xsd:annotation>
      <xsd:documentation>Describes an semaphore access</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType abstract="true" name="SenderReceiverCommunication">
    <xsd:annotation>
      <xsd:documentation>A abstract description for sender-receiver-communication (it can be read or write)</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="am:RunnableItem">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="label" type="am:Label"/>
        </xsd:choice>
        <xsd:attribute name="buffered" type="xsd:boolean"/>
        <xsd:attribute name="label" type="xsd:string"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="SenderReceiverCommunication" type="am:SenderReceiverCommunication">
    <xsd:annotation>
      <xsd:documentation>A abstract description for sender-receiver-communication (it can be read or write)</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="SenderReceiverRead">
    <xsd:annotation>
      <xsd:documentation>The read operation of the receiver of the sender-receiver-communication</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="am:SenderReceiverCommunication"/>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="SenderReceiverRead" type="am:SenderReceiverRead">
    <xsd:annotation>
      <xsd:documentation>The read operation of the receiver of the sender-receiver-communication</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="SenderReceiverWrite">
    <xsd:annotation>
      <xsd:documentation>The write operation of the sender of the sender-receiver-communication
It contains the runnables that have the corresponding SenderReceiverRead</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="am:SenderReceiverCommunication">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="notifiedRunnables" type="am:Runnable"/>
        </xsd:choice>
        <xsd:attribute name="notifiedRunnables" type="xsd:string"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="SenderReceiverWrite" type="am:SenderReceiverWrite">
    <xsd:annotation>
      <xsd:documentation>The write operation of the sender of the sender-receiver-communication
It contains the runnables that have the corresponding SenderReceiverRead</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType abstract="true" name="ServerCall">
    <xsd:annotation>
      <xsd:documentation>A abstract description for client/server communication
It refers to a required runnable that describes the called server operation</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="am:RunnableItem">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="serverRunnable" type="am:Runnable"/>
        </xsd:choice>
        <xsd:attribute name="serverRunnable" type="xsd:string"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="ServerCall" type="am:ServerCall">
    <xsd:annotation>
      <xsd:documentation>A abstract description for client/server communication
It refers to a required runnable that describes the called server operation</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="SynchronousServerCall">
    <xsd:annotation>
      <xsd:documentation>A synchronous server call</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="am:ServerCall">
        <xsd:attribute name="waitingBehaviour" type="am:WaitingBehaviour"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="SynchronousServerCall" type="am:SynchronousServerCall">
    <xsd:annotation>
      <xsd:documentation>A synchronous server call</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="AsynchronousServerCall">
    <xsd:annotation>
      <xsd:documentation>A asynchronous server call
It refers to a optional runnable that exploits the results produced by the server</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="am:ServerCall">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="resultRunnable" type="am:Runnable"/>
        </xsd:choice>
        <xsd:attribute name="resultRunnable" type="xsd:string"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="AsynchronousServerCall" type="am:AsynchronousServerCall">
    <xsd:annotation>
      <xsd:documentation>A asynchronous server call
It refers to a optional runnable that exploits the results produced by the server</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="ProbabilityGroup">
    <xsd:annotation>
      <xsd:documentation>Describes a group of runnable items with a probability</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="am:RunnableItem">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="items" type="am:ProbabilityRunnableItem"/>
        </xsd:choice>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="ProbabilityGroup" type="am:ProbabilityGroup">
    <xsd:annotation>
      <xsd:documentation>Describes a group of runnable items with a probability</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="ProbabilityRunnableItem">
    <xsd:annotation>
      <xsd:documentation>A runnable item with a probability</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="am:BaseObject">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="runnableItem" type="am:RunnableItem"/>
        </xsd:choice>
        <xsd:attribute name="probability" type="xsd:int"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="ProbabilityRunnableItem" type="am:ProbabilityRunnableItem">
    <xsd:annotation>
      <xsd:documentation>A runnable item with a probability</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="Group">
    <xsd:annotation>
      <xsd:documentation>Describes a group of deviation runnable items
It can be also a group of runnable items without deviation, because the deviation is optional for each item</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="am:RunnableItem">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="items" type="am:DeviationRunnableItem"/>
        </xsd:choice>
        <xsd:attribute name="ordered" type="xsd:boolean"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="Group" type="am:Group">
    <xsd:annotation>
      <xsd:documentation>Describes a group of deviation runnable items
It can be also a group of runnable items without deviation, because the deviation is optional for each item</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="DeviationRunnableItem">
    <xsd:annotation>
      <xsd:documentation>A runnable item with a deviation
The deviation is optional</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="am:BaseObject">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="runnableItem" type="am:RunnableItem"/>
          <xsd:element name="deviation" type="am:Deviation"/>
        </xsd:choice>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="DeviationRunnableItem" type="am:DeviationRunnableItem">
    <xsd:annotation>
      <xsd:documentation>A runnable item with a deviation
The deviation is optional</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="RunnableCall">
    <xsd:annotation>
      <xsd:documentation>Representation of a runnable call of a run entity.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="am:RunnableItem">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="runnable" type="am:Runnable"/>
          <xsd:element name="statistic" type="am:RunEntityCallStatistic"/>
        </xsd:choice>
        <xsd:attribute name="runnable" type="xsd:string"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="RunnableCall" type="am:RunnableCall">
    <xsd:annotation>
      <xsd:documentation>Representation of a runnable call of a run entity.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType abstract="true" name="Instructions">
    <xsd:annotation>
      <xsd:documentation>Represents a abstract description for a set of execution cycles in a runnable</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="am:RunnableItem">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="fetchStatistic" type="am:InstructionFetch">
            <xsd:annotation>
              <xsd:documentation>optional parameter for fetch statistic</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="Instructions" type="am:Instructions">
    <xsd:annotation>
      <xsd:documentation>Represents a abstract description for a set of execution cycles in a runnable</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="InstructionsDeviation">
    <xsd:annotation>
      <xsd:documentation>Represents a deviated set of execution cycles</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="am:Instructions">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="deviation" type="am:Deviation"/>
        </xsd:choice>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="InstructionsDeviation" type="am:InstructionsDeviation">
    <xsd:annotation>
      <xsd:documentation>Represents a deviated set of execution cycles</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="InstructionsConstant">
    <xsd:annotation>
      <xsd:documentation>Represents a constant set of execution cycles</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="am:Instructions">
        <xsd:attribute name="value" type="xsd:long"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="InstructionsConstant" type="am:InstructionsConstant">
    <xsd:annotation>
      <xsd:documentation>Represents a constant set of execution cycles</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType abstract="true" name="DataType">
    <xsd:annotation>
      <xsd:documentation>Central access point for different data type definitions</xsd:documentation>
    </xsd:annotation>
    <xsd:choice maxOccurs="unbounded" minOccurs="0">
      <xsd:element ref="xmi:Extension"/>
    </xsd:choice>
    <xsd:attribute ref="xmi:id"/>
    <xsd:attributeGroup ref="xmi:ObjectAttribs"/>
  </xsd:complexType>
  <xsd:element name="DataType" type="am:DataType">
    <xsd:annotation>
      <xsd:documentation>Central access point for different data type definitions</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType abstract="true" name="CompoundType">
    <xsd:annotation>
      <xsd:documentation>Couple of compound data types</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="am:DataType"/>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="CompoundType" type="am:CompoundType">
    <xsd:annotation>
      <xsd:documentation>Couple of compound data types</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="Struct">
    <xsd:annotation>
      <xsd:documentation>Representing a struct definition, containing different entries</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="am:CompoundType">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="customProperties" type="am:CustomProperty"/>
          <xsd:element name="entries" type="am:StructEntry"/>
        </xsd:choice>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="Struct" type="am:Struct">
    <xsd:annotation>
      <xsd:documentation>Representing a struct definition, containing different entries</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="StructEntry">
    <xsd:annotation>
      <xsd:documentation>Representation of one struct entry</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="am:BaseObject">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="dataType" type="am:DataType"/>
        </xsd:choice>
        <xsd:attribute name="name" type="xsd:string"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="StructEntry" type="am:StructEntry">
    <xsd:annotation>
      <xsd:documentation>Representation of one struct entry</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="Array">
    <xsd:annotation>
      <xsd:documentation>Representation of an array data type</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="am:CompoundType">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="customProperties" type="am:CustomProperty"/>
          <xsd:element name="dataType" type="am:DataType"/>
        </xsd:choice>
        <xsd:attribute name="numberElements" type="xsd:int"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="Array" type="am:Array">
    <xsd:annotation>
      <xsd:documentation>Representation of an array data type</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="Pointer">
    <xsd:annotation>
      <xsd:documentation>Representing a pointer</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="am:CompoundType">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="customProperties" type="am:CustomProperty"/>
          <xsd:element name="dataType" type="am:DataType"/>
        </xsd:choice>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="Pointer" type="am:Pointer">
    <xsd:annotation>
      <xsd:documentation>Representing a pointer</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="TypeRef">
    <xsd:complexContent>
      <xsd:extension base="am:DataType">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="customProperties" type="am:CustomProperty"/>
          <xsd:element name="typeDef" type="am:TypeDefinition"/>
        </xsd:choice>
        <xsd:attribute name="typeDef" type="xsd:string"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="TypeRef" type="am:TypeRef"/>
  <xsd:complexType name="DataPlatformMapping">
    <xsd:annotation>
      <xsd:documentation>Mapping of a data type to a target platform.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="am:BaseObject">
        <xsd:attribute name="platformName" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>Name of the target platform</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="platformType" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>Corresponding type of the target platform</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="DataPlatformMapping" type="am:DataPlatformMapping">
    <xsd:annotation>
      <xsd:documentation>Mapping of a data type to a target platform.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType abstract="true" name="TypeDefinition">
    <xsd:complexContent>
      <xsd:extension base="am:ReferableBaseObject"/>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="TypeDefinition" type="am:TypeDefinition"/>
  <xsd:complexType name="DataTypeDefinition">
    <xsd:complexContent>
      <xsd:extension base="am:TypeDefinition">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="dataType" type="am:DataType"/>
        </xsd:choice>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="DataTypeDefinition" type="am:DataTypeDefinition"/>
  <xsd:complexType name="BaseTypeDefinition">
    <xsd:annotation>
      <xsd:documentation>Basic data type definition, including information of mapping to target platforms</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="am:TypeDefinition">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="size" type="am:DataUnit">
            <xsd:annotation>
              <xsd:documentation>Size of the data type</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="dataMapping" type="am:DataPlatformMapping">
            <xsd:annotation>
              <xsd:documentation>Data mappings of target platforms</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:choice>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="BaseTypeDefinition" type="am:BaseTypeDefinition">
    <xsd:annotation>
      <xsd:documentation>Basic data type definition, including information of mapping to target platforms</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType abstract="true" name="Activation">
    <xsd:annotation>
      <xsd:documentation>General abstraction for activation source.
Used for first definition of an activation rate, which is later refined by stimulus.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="am:ReferableBaseObject"/>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="Activation" type="am:Activation">
    <xsd:annotation>
      <xsd:documentation>General abstraction for activation source.
Used for first definition of an activation rate, which is later refined by stimulus.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="PeriodicActivation">
    <xsd:annotation>
      <xsd:documentation>Min and Max execution frequency within a task or timeslice</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="am:Activation">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="min" type="am:Time"/>
          <xsd:element name="max" type="am:Time"/>
          <xsd:element name="offset" type="am:Time"/>
          <xsd:element name="deadline" type="am:Time"/>
        </xsd:choice>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="PeriodicActivation" type="am:PeriodicActivation">
    <xsd:annotation>
      <xsd:documentation>Min and Max execution frequency within a task or timeslice</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="SporadicActivation">
    <xsd:complexContent>
      <xsd:extension base="am:Activation"/>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="SporadicActivation" type="am:SporadicActivation"/>
  <xsd:complexType name="SingleActivation">
    <xsd:annotation>
      <xsd:documentation>A single activation between time min and max</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="am:Activation">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="min" type="am:Time"/>
          <xsd:element name="max" type="am:Time"/>
        </xsd:choice>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="SingleActivation" type="am:SingleActivation">
    <xsd:annotation>
      <xsd:documentation>A single activation between time min and max</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="CustomActivation">
    <xsd:complexContent>
      <xsd:extension base="am:Activation">
        <xsd:attribute name="description" type="xsd:string"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="CustomActivation" type="am:CustomActivation"/>
  <xsd:complexType name="LabelAccessStatistic">
    <xsd:annotation>
      <xsd:documentation>Contains information about access statistic values</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="am:BaseObject">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="value" type="am:NumericStatistic"/>
          <xsd:element name="cacheMisses" type="am:NumericStatistic"/>
        </xsd:choice>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="LabelAccessStatistic" type="am:LabelAccessStatistic">
    <xsd:annotation>
      <xsd:documentation>Contains information about access statistic values</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="InstructionFetch">
    <xsd:complexContent>
      <xsd:extension base="am:BaseObject">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="count" type="am:NumericStatistic"/>
          <xsd:element name="misses" type="am:NumericStatistic"/>
          <xsd:element name="cyclesPerFetch" type="am:NumericStatistic"/>
        </xsd:choice>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="InstructionFetch" type="am:InstructionFetch"/>
  <xsd:complexType name="RunEntityCallStatistic">
    <xsd:complexContent>
      <xsd:extension base="am:BaseObject">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="statistic" type="am:NumericStatistic"/>
        </xsd:choice>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="RunEntityCallStatistic" type="am:RunEntityCallStatistic"/>
</xsd:schema>
