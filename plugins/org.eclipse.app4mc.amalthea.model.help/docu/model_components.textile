
h1. Components Model

The AMALTHEA component model is central accessible through the __ComponentsModel__ element.

It holds the following types:

* *Component* / *Composite* ('components' containment reference)
* *System* ('systems' containment reference)
* *Tag* ('tags' containment reference)

!(#scale)../pictures/model_components.png!


h2. Components Model Elements

The elements of the Components Model inherit several capabilities from common elements.

!(#scale)../pictures/model_components_common.png!

Ports, Components, Composites and ComponentInstances are referable by unique names.
A Connector also has a name but the name is optional and does not have to be unique.

h3. Component

The 'Component' class represents a component. Components could be created directly within the 'ComponentModel' and are used as a type for a component instance.

!(#scale)../pictures/model_components_component_references.png!

It contains several ports which must implement the 'IPort' interface. A component refers the classes 'OsEvent', 'Label', 'Runnable' and 'AbstractProcess' from the software model and the class 'Semaphore' from the OS model.

h3. System

Systems are defined as top level elements within a component model. A system contains several component- and
connection-instances and is used to define the architecture of a technical system. It inherits (like Composite) from the interface 'ISystem'.

h3. Composite

A 'Composite' is a special component type which also inherits from ISystem to aggregate Component- or Composite- and Connection-instances compositely. So it could be used to create hierarchical component structures.

h3. ComponentInstance and Connector

The 'ComponentInstance' and the 'Connector' can be created within a 'System' or a 'Composite'. 'ComponentInstances' are used to represent instances of component- or composite-types. The 'Connector' class is used to connect the component instances to each other via their Ports. The connector contains a source and target 'QualifiedPort'. A 'Qualified' port refers a 'ComponentInstance' and an 'IPort'.

The 'FInterfacePort' class contains the attribute 'kind' to set the port direction ('provides' or 'requires').
The attribute 'interface name' can be used to refer to an external definition, e.g. described in detail with the Franca IDL. 


h2. Franca IDL

Franca is a a common interface definition  language (IDL). The initial version has been developed by the GENIVI consortium as part of the standardization of an In-Vehicle Infotainment (IVI) platform. The first public version of Franca was released in 2012 under the Eclipse Public License. The future development of Franca will take place in an official Eclipse project under the Eclipse Modeling Top-level Project.

The Franca IDL files (*.fidl) are valid model resources in AMALTHEA projects. They can be edited in a textual editor that is provided by Franca. 

!../pictures/model_franca_editor_screenshot.png!

AMALTHEA ports can specify the 'interface name' to refer to interfaces in Franca.

!../pictures/model_components_Franca_IDL.png!

