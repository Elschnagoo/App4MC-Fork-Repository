
h2. Hardware Model

The AMALTHEA hardware model is used to describe hardware systems which usually consist of ECU, microcontrollers, processing units, memories, connections etc. It is accessible through the __HWModel__ element and contains following top level elements:

* Definitions
* Domains
* Features
* Structures





h3. Class Diagrams

h4. Hardware model elements

!(scale)../pictures/model_hw_main.png!

h4. Hardware definitions and features

!(scale)../pictures/model_hw_definition.png!

h4. Hardware modules and access elements

!(scale)../pictures/model_hw_module.png!

h4. Hardware paths and destinations

!(scale)../pictures/model_hw_access.png!




h3. Documents

* "HW Documentation (PDF)":../help-model/docs/Amalthea_HW_Documentation.pdf
* "HW Model Examples (PDF)":../help-model/docs/Amalthea_HW_Model_Examples.pdf
* "HW Visualization Plugin (PDF)":../help-model/docs/Amalthea_HW_Visualization_Plugin.pdf




................................................

h3. Former Model (temporarily kept as reference)



h3. Structure

An overview of the Hardware Model is shown below. The overall hierarchy within this model is represented by blue classes (HwSystem, ECU, Microcontroller and Core). Red classes indicate type descriptions which contain the parameters of their referencing elements, e.g. it is possible to specify a type of a core with all relevant attributes which will be referenced by core instances. This supports quick modeling of homogeneous architectures and increases the reutilization of already described hardware. Green classes represent additional hardware peripherals which can be described on each of the hardware hierarchies (HwSystem, ECU, Microcontroller and Core). 

!(scale)../pictures/model_hw_overview.png!

The structure of descriptions regarding the network is shown in the following figure. The __ComplexNode__ and each of its specializations (e.g. HwSystems, ECUs, Networks, ...) may contain a list of HwPort elements. The __ComplexPort__ element is a specialization which is attached to exactly one network. More detailed descriptions about the respective elements are given in the following section.

!../pictures/model_hw_network.png!

h4. ComplexNode

The __ComplexNode__ is the generalization of all hardware components. It holds the described components name and contains its nested hardware elements, e.g. memories, networks, ports etc.

table(classic). 
|_. Attribute |_. Type |_. Mul. |_. Valid Values |_. Description |
| prescaler | Containment | * | __Prescaler__ | Containment for __Prescaler__ (i.e. frequency prescaler) objects located on the specialization of this element. |
| memories | Containment | * | __Memory__ | Containment for __Memory__ (i.e. memories, such as RAM or ROM) objects located on the specialization of this element. |
| networks | Containment | * | __Network__ | Containment for __Network__ (i.e. networks, such as LIN, CAN or ETHERNET) objects located on the specialization of this element. |
| components | Containment | * | __HwComponent__ | Containment for __HwComponent__ (i.e. all other entities of hardware) objects located on the specialization of this element. |
| ports | Containment | * | __HwPort__ | Containment for __HwPort__ (i.e. interfaces with multiple pins) objects located on the specialization of this element. |

h4. HwSystem

The __HwSystem__ is a specialization of the __ComplexNode__ and represents a cluster of one or more __ECU__ elements which in sum implement a specific system. 

table(classic). 
|_. Attribute |_. Type |_. Mul. |_. Valid Values |_. Description |
| systemType | Reference | 1 | __SystemType__ | Refers to a __SystemType__ containing the configuration for this system. |
| ecus | Containment | + | __ECU__ | Containment for Electronic Control Units (__ECU__) that are part of this system. |

h4. ECU

The __ECU__ (Electronic Control Unit) is a specialization of the __ComplexNode__ and represents any physical electronic hardware on an embedded system level abstraction level.

table(classic). 
|_. Attribute |_. Type |_. Mul. |_. Valid Values |_. Description |
| ecuType | Reference | 1 | __ECUType__ | Refers to a __ECUType__ containing the configuration for this ECU. |
| microcontrollers | Containment | + | __Microcontroller__ | Containment for __Microcontrollers__ that are part of this ECU. |

h4. Microcontroller

The __Microcontroller__ is a specialization of the __ComplexNode__ and represents any physical hardware on System on Chip abstraction level, e.g. processors with one or more special or generic purpose cores.

table(classic). 
|_. Attribute |_. Type |_. Mul. |_. Valid Values |_. Description |
| microcontrollerType | Reference | 1 | __MicrocontrollerType__ | Refers to a __MicrocontrollerType__ containing the configuration for this microcontroller. |
| cores | Containment | + | __Core__ | Containment for processing cores (__Core__) that are part of this microcontroller. |

h4. Core

The __Core__ is a specialization of the __ComplexNode__ and represents the respective processing units on any type of single- or multi core processor.

table(classic). 
|_. Attribute |_. Type |_. Mul. |_. Valid Values |_. Description |
| coreType | Reference | 1 | __CoreType__ | Refers to a __CoreType__ containing the configuration for this core. |
| lockstepGroup | Integer | ? | 0 - 255 | If set, this value defines the lockstep group of the core. All cores with the same lockstep group are operating in lockstep mode together. |

h4. Memory

The __Memory__ is a specialization of the __ComplexNode__ and represents memories. It is used to describe any type of memory module, e.g. Flash, RAM, etc.
Please note that to specify a memory with the type __CACHE__ (e.g. lv1 cache as part of a core) it is sufficient to specify it within a core. It is not necessary to specify additional networks or ports.

table(classic). 
|_. Attribute |_. Type |_. Mul. |_. Valid Values |_. Description |
| type | Reference | 1 | __MemoryType__ | Refers to a __MemoryType__ containing the configuration for this memory. |


h4. Network

The __Network__ is a specialization of the __ComplexNode__ and represents networks of interconnected __ComplexPort__ elements. 

table(classic). 
|_. Attribute |_. Type |_. Mul. |_. Valid Values |_. Description |
| type | Reference | 1 | __NetworkType__ | Refers to a __NetworkType__ containing the configuration for this network. | 

h4. Quartz

The __Quartz__ is defined on __HWSystem__ level and represents a frequency generator. It may be referenced by any number of __Prescalers__.

table(classic). 
|_. Attribute |_. Type |_. Mul. |_. Valid Values |_. Description |
| type | __QType__ | 1 | STATIC / DYNAMIC | Specifies if the __Quartz__ operates at either a static or dynamic frequency. |
| frequency | __Frequency__ | 1 |  | Frequency on which this __Quartz__ is operating. |

h4. Component

The __Component__ (or __HwComponent__) is a specialization of the __ComplexNode__ and represent hardware elements which are not further specified. They may contain any number of nested __Components__.

table(classic). 
|_. Attribute |_. Type |_. Mul. |_. Valid Values |_. Description |
| nestedComponents | Containment | 1 | __HwComponent__ | Containment for __HwComponent__ (i.e. all other entities of hardware) objects located below this component. |

h4. HardwareTypeDescription

The abstract class __HardwareTypeDescription__ is the generalization of all type description for memories, cores, ECUs, networks etc. It allows its specializations to stor information about their features.

h4. AbstractionTypeDescription

The abstract class __AbstractionTypeDescription__ is a specialization of the __HardwareTypeDescription__ and generalization for hardware types which describe hardware abstraction, i.e. the __HwSystem__, __ECU__, __Microcontroller__ and __Core__.

h4. SystemType

The __SystemType__ is a specialization of the __AbstractionTypeDescription__ and used to define a specific type of a system. If multiple systems with the same characteristics exist, it is sufficient to define only one type and reference it by all systems sharing the same type.

h4. ECUType

The __ECUType__ is a specialization of the __AbstractionTypeDescription__ and used to define a type of an ECU.

h4. MicrocontrollerType

The __MicrocontrollerType__ is a specialization of the __AbstractionTypeDescription__ and used to define a type of a Microcontroller.

h4. CoreType

The __CoreType__ is a specialization of the __AbstractionTypeDescription__ and used to define a type of a Core, i.e. its bit width and ticks per cycle.

table(classic). 
|_. Attribute |_. Type |_. Mul. |_. Valid Values |_. Description |
| bitWidth | Integer | 1 | 0-255 | The cores architectures bit width (e.g. 32 or 64 bit) |
| instructionsPerCycle | Integer | 1 | 0-255 | Number of processed (computed) instructions per cycle. |

h4. MemoryType

The __MemoryType__ is a specialization of the __HardwareTypeDescription__ and used to define a type of a memory, i.e. its size, access pattern and type.

table(classic). 
|_. Attribute |_. Type |_. Mul. |_. Valid Values |_. Description |
| xAccessPattern | String | 1 | String | Timing Architects specific value. Will be used in the future to determine the access pattern of a memory element. |
| type | __MemoryType__ | 1 | RAM/CACHE/FLASH_INT/FLASH_EXT | Specifies the type of this Memory. |
| size | Long | 1 | >0 | Size of this memory. |

h4. NetworkType

The __NetworkType__ is a specialization of the __HardwareTypeDescription__ and used to define a type of a Network, i.e. max supported bit width and scheduling policy.

table(classic). 
|_. Attribute |_. Type |_. Mul. |_. Valid Values |_. Description |
| schedPolicy | __SchedType__ | 1 | RROBIN/PRIORITY | Specifies the scheduling policy which is used on this Network. |
| bitWidth | Integer | 1 | 0 - 255 | Specifies the max bit width that may be transferred on this network per cycle. |

h4. CrossbarSwitch

The __CrossbarSwitch__ is a specialization of a __NetworkType__ and represents switches, which allow simultaneous/concurrent connections between all types of components

table(classic). 
|_. Attribute |_. Type |_. Mul. |_. Valid Values |_. Description |
| conConnections | Integer | 1 | 0 - 255 | Maximum number of concurrent 1:n connections |

h4. Bus

The __Bus__ is a specialization of the __NetworkType__ and represents any kind of bus network, e.g. CAN, LIN etc.

table(classic). 
|_. Attribute |_. Type |_. Mul. |_. Valid Values |_. Description |
| type | __BusType__ | 1 | CAN/TTCAN/LIN/FLEXRAY/ETHERNET/SPI/NA | Specifies the type of the bus network. |

h4. Bridge

The __Bridge__ is a specialization of a __NetworkType__ and represents bridges or gateways. It is used to transfer data from one network to another and performs a one-way translation, e.g. a __ComplexNode__ containing a __Bridge__ is accessed by its __ComplexPort__ and routes the data to its containing __Bridge__. If a __ComplexNode__ contains more than one __Bridge__, the respective target network is determined by the address range of its connected __ComplexPort__ elements. 

h4. Pin

The __Pin__ represents a single pin and serves as abstract representation for pure informative use, e.g. by a developer describing a port.

h4. ComplexPin

The __ComplexPin__ is a specialization of the __Pin__ and contains detailed information, i.e. the type of the pin, its address and its direction (read/write). 

table(classic). 
|_. Attribute |_. Type |_. Mul. |_. Valid Values |_. Description |
| type | __PinType__ | 1 | ANALOG/DIGITAL | Specifies if this pin is either operating in analog or digital mode |
| baseAddress | Long | 1 | >= 0 | Specifies the address of this pin, i.e. the address this pin is accessed by. |
| direction | __RWType__ | 1 | R/W/RW | Specifies the direction the data may travel through this pin, e.g. (R)ead only, (W)rite only or both (RW). |

h4. Port

The __Port__ represents groups of pins and may be used to describe simple interfaces, e.g. 8-bit ports etc. Its main purpose is to describe ports which only serve informative use.

h4. ComplexPort

The __ComplexPort__ is a specialization of the __Port__ and represents interfaces on any type of __ComplexNode__ which are connected to a __Network__.

table(classic). 
|_. Attribute |_. Type |_. Mul. |_. Valid Values |_. Description |
| network | Reference | 1 | __Network__ | References the network which this ComplexPort is a part of. Only ComplexPorts attached to the same network are capable of communicated directly with each other. If data is transfered over multiple networks, either a valid route (e.g. Port A -> Network A -> Port B and Port C -> Network B -> Port D, with Ports B and C beeing on the same device), or an access path have to be present. |
| isMaster | Boolean | 1 | TRUE/FALSE | Specifies if this ComplexPort may send requests to a Network (e.g. a processor) or just answer them (e.g. a memory). |
| bitWidth | Integer | 1 | >0 | Specifies the max bit width that may be transferred via this ComplexPort. |
| baseAddress | Long | 1 | >0 | Specifies the base address of this ComplexPort, making it addressable through other ComplexPorts in the Network. |
| addressRange | Long | 1 | >0 | Specifies the size of the addressable area this ComplexPort is addressed by. The address space is determined by the baseAddress offset and this value. |
| direction | __RWType__ | 1 | R/W/RW | Specifies the direction the data may travel through this port, e.g. (R)ead only, (W)rite only or both (RW). Note that the direction is always related to the isMaster attribute, e.g. Master ports read and write TO the network, while non-master ports are read and written BY the network. |
| readCycles | Integer | 1 | >0 | Specifies the number of cycles until a read is performed. |
| writeCycles | Integer | 1 | >0 | Specifies the number of cycles until a write is performed. |
| schedValue | Integer | 1 | >0 | Optional parameter for the usage in network scheduling policies. The meaning of this attribute depends on the used schedulingPolicy of the referenced Network, e.g. it may be the priority in a priority scheduled network or the order in a round robin scheduled network. |

h4. AbstractType

The __AbstractType__ is an abstract class, allowing attributes to describe data without specifying their data type. It contains the field name to specify the name of the value while the specializations __BoolValue__, __CharValue__, __IntValue__, __LongValue__, __DoubleValue__ and __StringValue__ contain the resp. value types.

h3. AccessPaths

The __AccessPath__ element describes in general the needed time in cycles for a hardware element (__ComplexNode__) A to access a hardware element B.
It can be configured in two different ways:

# *Latency*: Describes the needed cycles for a given __RWType__ using a __Deviation__ (from common model) or a constant value.
# *Sequence of ports*: Describes the access path in detail by referencing the __ComplexPorts__ from given Hardware elements. These ports includes the specification for the different access types in cycles, which can then be summed up to get the total value.

Both approaches includes the possibility to reference another given path of the same type, so it is possible for example to describe sub paths, which are then included in a main path.

The following picture shows the structure of these two approaches:

!(scale)../pictures/model_hw_access_path.png!

h4. Latency Overview

To describe a latency for a given core a memory, only these elements are needed inside of the Hardware model.
The next picture shows a simple overview of a core, which is able to access two memories with different latencies.

!../pictures/model_hw_access_path_latency_sample.png!

Using the provided AMALTHEA model editor this small sample would look like the following picture:

!../pictures/model_hw_access_path_latency_sample_editor.png!

h4. Hardware Access Path

Using the __HwAccessPath__ element to describe an access path, the included elements must be available with the proper __ComplexPorts__. The access path consists with a list of elements, which are referencing existing ports.

The next overview shows a very simple sample, with a core and two memories connected using a network and the proper ports.

!../pictures/model_hw_access_path_hw_element_sample.png!

Configuring the two access paths from Core1 to Memory1 and to Memory2  results in two __HwAccessPaths__ containing the proper ports, showed in the next overview.

!../pictures/model_hw_access_path_hw_element_sample_editor.png!