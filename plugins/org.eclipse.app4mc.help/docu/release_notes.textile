h1. Release Notes


h2. Eclipse APP4MC 0.9.1 (Jul 2018)

General
* New Eclipse Oxygen.3a based product (compatible with Java 8, Java 9 and Java 10)
* License change from EPL-1.0 to EPL-2.0

Model handling
* Model migration support (0.9.0 -> 0.9.1)
* New implementation of transient back references
* Unified approach for fast name search and mass delete
* Updated model utilities

Model changes
* New concept of DataDependency (to describe potential data dependencies)
* New possibility to specify RunnableParameters and CallArguments


h2. Eclipse APP4MC 0.9.0 (Apr 2018)

Model handling
* Model migration support (0.8.3 -> 0.9.0)
* Updated model utilities

Model changes
* *New hardware model*
* New concept of ExecutionNeed (replaces the former RunnableInstructions)

 __Note: This is the first implementation of the new hardware model. It will be extended in the next version and (minor) changes are expected__.


h2. Eclipse APP4MC 0.8.3 (Jan 2018)

General
* New Eclipse Neon.3 based product

Model handling
* Model migration support (0.8.2 -> 0.8.3)
* Updated model utilities

Model changes
* New mode conditions (logical AND)
* New timing requirement (end to start)
* Reworked Stimuli definitions
* New reference to port for client server and sender receiver communication

_For details see "Release 0.8.3 issues":https://projects.eclipse.org/projects/technology.app4mc/releases/0.8.3/bugs_


h2. Eclipse APP4MC 0.8.2 (Oct 2017)

General
* Model changes (extensions)
* New graphical editors (based on Sirius)

Model handling
* Model migration support (0.8.1 -> 0.8.2)
* New model utilities

Model changes
* New runnable item to get the result of an asynchronous request
* New possibility to specify the label access implementation
* New measurement model
* New component event

_For details see "Release 0.8.2 issues":https://projects.eclipse.org/projects/technology.app4mc/releases/0.8.2/bugs_


h2. Eclipse APP4MC 0.8.1 (Jul 2017)

General
* Model changes (extension and harmonization)
* Improved model handling
* New tooling: EMF Graphical Viewer

Model handling
* Model migration support (0.8.0 -> 0.8.1)
* New support for compressed model files (zip)
* More back references

Model changes
* Extended Schedulers (hierarchical, reservation based)
* Extend Semaphore definition (types)
* Consistent naming of Triggers, Activations and Stimuli
* New elements for data driven computation (conditions, triggers)

_For details see "Release 0.8.1 issues":https://projects.eclipse.org/projects/technology.app4mc/releases/0.8.1/bugs_



h2. Eclipse APP4MC 0.8.0 (Apr 2017)

General
* Model changes (mainly to simplify handling)
* Improved tooling: model utilities
* New UI components: Multicore Wizard, Task-Visualizer (draft version)

Model handling
* Model migration support (0.7.2 -> 0.8.0)

Model changes
* Simplified model handling: Mapping Model, Modes, Time
* New classifiers to annotate Core and Memory
* Reworked Property Constraints
* Extended OS Overheads

_For details see "Release 0.8.0 issues":https://projects.eclipse.org/projects/technology.app4mc/releases/0.8.0/bugs_



h2. Eclipse APP4MC 0.7.2 (Jan 2017)

General
* Smaller product definition (optional parts can be installed via update sites)
* Harmonized model API

Model handling
* Model migration support (0.7.1 -> 0.7.2)
* Improved back references

Model changes
* New core-specific runtimes (instructions) for runnables
* New model elements for streaming communication (Channels)*
* New Transmission Policy for communication (e.g. label accesses) 
* New Event-based Stimulus
* New Data Consistency needs
* New Counters for InterProcessActivation and EventStimulus
* Harmonized model elements to describe probability
* Storage of common elements (e.g. tags) in one central location

Bug fixes / Improvements
* Model migration (ISR call graph, Section names, cross document references)
* Back references (Memory -> Mapping, Scheduler -> CoreAllocation)

Documentation
* New model elements: Physical memory sections, Channels
* New examples

 * =  __Experimental feature (first modeling attempt that may change in future versions)__.

_For details see "Release 0.7.2 issues":https://projects.eclipse.org/projects/technology.app4mc/releases/0.7.2/bugs_



h2. Eclipse APP4MC 0.7.1 (Oct 2016)

Model handling
* Model migration support (0.7.0 -> 0.7.1)
* Improved update of opposite references
* Storage of default values is enabled by default

Model changes
* New distribution "Beta Distribution"
* New stimuli type "Synthetic" (to "replay" activations from a hardware trace)
* New DataStabilityGroup
* Introduced SamplingType as new attribute for Deviation
* Introduced physical memory sections (PhysicalSectionConstraint, PhysicalSectionMapping)
* Reworked AffinityConstraints (removed Scheduler constraints, added Data constraints)
* Reworked Event / Event-Chain Constraints
* Reworked RunnableSequencingConstraints
* New types for DataSizes and DataRates

_For details see "Bugzilla entries for 0.7.1":https://bugs.eclipse.org/bugs/buglist.cgi?product=App4mc&target_milestone=0.7.1_



h2. Eclipse APP4MC 0.7.0 (Jul 2016)

Model handling
* Model migration support (itea1.1.0 -> itea1.1.1 -> 0.7.0)
* Simplified model creation wizard
* One consolidated model
* Additional opposite references (transient) to ease model navigation
* Scripting support for workflows (based on Eclipse EASE)

Model changes
* Removed 'attributes' and 'features' from hardware model
* Replaced generic __ProcessAllocation__ with specific __ISRAllocation__ and __TaskAllocation__
* New __BigInteger__ values for __CustomAttributes__
* Some renamed classes and attributes (details in the help)

Model structure
* Removed direct dependency to Franca (replaced by implicit reference by interface name)

Documentation
* Updated model documentation / class diagrams
* New developer guide regarding Model Migration Framework
* New developer guide regarding Workflows


h2. AMALTHEA 1.1.1 (Oct 2015)

Model handling
* Changed serialized model references to __name based references__
* Restricted __model scope__ to surrounding folder (without sub folders)

Model changes
* Added __HwAccessPath__ to hardware model to describe an access path either by using latencies or available hardware elements
* Added __Modes__ to common model and __ModeLabels__ to software model to describe alternative execution paths of tasks
* Added __isBuffered__ attribute to Labels and LabelAccesses to describe data consistency requirements
* Added __Requirements__ to constraints model to describe quality requirements for the dynamic architecture
* Added __DataCoherencyGroups__ to constraints model to describe data coherency requirements
* Added __ProcessChains__ to software model to describe data processing over multiple tasks

* Switched validations to Sphinx check based and added different model validations
* New values for __CustomAttributes__ with __Time__ and __SignedTime__

Features
* New __AMALTHEA Trace Database (ATDB) Import__ to create an AMALTHEA model from a trace

Documentation
* Updated model documentation / class diagrams
* Updated user guide documentation to include steps for create a new AMALTHEA model with wizard
* Updated user guide documentation to include a tutorial for using the AMALTHEA Trace Database (ATDB) Import



h2. AMALTHEA 1.1.0 (Aug 2015)

* Updated OS model to include now possibility to describe the operating system in more detail, like OS overhead
* Added Event Sets to Event model to allow the definition of an unspecified order for events in an event chain
* Added Data Age Constraints to constraints model
* Added Label Value Lists to Stimulus model to enable and disable stimuli by label values or to set label values by the activation of a stimulus 
* Added Arrival Curve Stimulus to Stimulus model 
* Added Terminate Task for Call Graph in Software model to allow the termination of a task within a switch
* Added a address attribute in the Mapping model to allow the definition of a memory address in the memory mapping
* Added CustomAttributes to all model AMALTHEA model elements
* Added first version of OSLC adapter
* Replace of attribute read/write in LabelAccessStatistic with value and readCacheMisses with cacheMisses
* Added documentation for Counter element in SW model
