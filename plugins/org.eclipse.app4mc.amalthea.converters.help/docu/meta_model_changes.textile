
h2(#meta model-changes). AMALTHEA meta model changes


Based on the changes in AMALTHEA meta model across various releases, below description contains the differences in detail which are considered for model migration:

h3. Version ITEA 1.0.3 to ITEA 1.1.0

Below are the changes in the meta model from ITEA 1.1.0 version to ITEA 1.1.1

* *Changes in the namespaces:* 

table(classic){margin-left:40px}. 
| *_AMALTHEA Namespace (version ITEA 1.0.3)_* | *_AMALTHEA Namespace  (verison ITEA 1.1.0)_* |
|http://www.amalthea.itea2.org/model/1.1.0/sw |http://www.amalthea.itea2.org/model/1.2.0/sw |
|http://www.amalthea.itea2.org/model/1.1.0/stimuli |http://www.amalthea.itea2.org/model/1.2.0/stimuli|
|http://www.amalthea.itea2.org/model/1.1.0/propertyconstraints |http://www.amalthea.itea2.org/model/1.2.0/propertyconstraints |
|http://www.amalthea.itea2.org/model/1.1.0/os |http://www.amalthea.itea2.org/model/1.2.0/os|
|http://www.amalthea.itea2.org/model/1.1.0/mapping |http://www.amalthea.itea2.org/model/1.2.0/mapping |
|http://www.amalthea.itea2.org/model/1.1.0/hw |http://www.amalthea.itea2.org/model/1.2.0/hw|
|http://www.amalthea.itea2.org/model/1.1.0/events |http://www.amalthea.itea2.org/model/1.2.0/events |
|http://www.amalthea.itea2.org/model/1.1.0/constraints |http://www.amalthea.itea2.org/model/1.2.0/constraints |
|http://www.amalthea.itea2.org/model/1.1.0/config |http://www.amalthea.itea2.org/model/1.2.0/config |
|http://www.amalthea.itea2.org/model/1.1.0/common |http://www.amalthea.itea2.org/model/1.2.0/common |
|http://www.amalthea.itea2.org/model/1.1.0/central |http://www.amalthea.itea2.org/model/1.2.0/central |
|http://amalthea.itea2.org/model/1.1.0/components|http://amalthea.itea2.org/model/1.2.0/components|

* *Following Class names are changed:*

table(classic){margin-left:40px}. 
|*Class name in 1.0.3*|*Changed Class name in 1.1.0*|*Amalthea sub-model*|
|DeadlineMonotinic|DeadlineMonotonic |OS|

* *Below are the references which are removed:*

table(classic){margin-left:40px}. 
| *_Variable Name (version ITEA 1.0.3)_* |  *_Class containing Variable_* | *_AMALTHEA sub model_* | *_how migration is done from 1.0.3 models to 1.1.0_* |
|scheduler|OSModel| OS model| <div>"scheduler" elements contained inside OSModel element are converted into TaskScheduler elements in the following way: <ul><li>OperatingSystem element is created and associated to the OSModel element _(Note: OperatingSystem class is newly introduced in 1.1.0)_</li><li>All the Scheduler elements present inside the OSModel element are moved to the OperatingSystem element as TaskScheduler's </li><li>All the places where Scheduler elements were referred earlier, are updated so as to refer corresponding TaskScheduler element</li></ul></div>|
|read, write |LabelAccessStatistic| Software model| <div>"read" elements contained inside LabelAccessStatistic element are removed and "write" elements are replaced by tag name "value" based on the following criteria : <ul><li>If the LabelAccess element containing LabelAccessStatistic -&gt;contains the access as "write", then all the "read" elements of LabelAccessStatistic are removed </li> </ul><br/>"write" elements contained inside LabelAccessStatistic element are removed and "read" elements are replaced by tag name "value" based on the following criteria : <ul><li>If the LabelAccess element containing LabelAccessStatistic -&gt;contains the access as "read", then all the "write" elements of LabelAccessStatistic are removed </li> </ul></div>|

* *Below are the changes in the reference names :*

table(classic){margin-left:40px}. 
| *_Variable Name (version ITEA 1.0.3)_* | *_Changed Variable Name (version ITEA 1.1.0)_* | *_Class containing Variable_* | *_AMALTHEA sub model_* | *_how migration is done from 1.0.3 models to 1.1.0_* |
| readCacheMisses | cacheMisses | LabelAccessStatistic | Software model | "readCacheMisses" is changed to "cacheMisses" in all the places where LabelAccessStatistic definition is present |
| executableAllocation | processAllocation, runnableAllocation | MappingModel | Mapping model | <div>Based on the content of the "executableAllocation", accordingly either "processAllocation" or "runnableAllocation" elements are created and the corresponding data of "exeuctableAllocation" is mapped. <br/> Below are the criterions  : <ul> <li>If "executableAllocation" consists of Task element and Scheduler mapping then - &gt; "ProcessAllocation" of type "mapping:TaskAllocation" is created</li><li>If "executableAllocation" consists of ISR element and Scheduler mapping then - &gt; "ProcessAllocation" of type "mapping:ISRAllocation" is created, and to it corresponding ISR element and "InterruptController" element are associated (_<b>Note:</b>If there is a mapping to "ISR" and "Scheduler" in "executableAllocation", InterruptController element is created and referred in the "executableAllocation". In this case previous mapping to the Scheduler element is lost_) </li><li>If "executableAllocation" consists of Runnable element and Scheduler mapping then - &gt; "RunnableAllocation" of type "mapping:RunnableAllocation" is created</li></ul></div> |

h3. Version ITEA 1.1.0 to ITEA 1.1.1

Below are the changes in the meta model from ITEA 1.1.0 version to ITEA 1.1.1

* *Changes in the namespaces:* 

table(classic){margin-left:40px}. 
| *_AMALTHEA Namespace (version ITEA 1.1.0)_* | *_AMALTHEA Namespace  (version ITEA 1.1.1)_* |
|http://www.amalthea.itea2.org/model/1.2.0/sw |http://www.amalthea.itea2.org/model/1.3.0/sw |
|http://www.amalthea.itea2.org/model/1.2.0/stimuli |http://www.amalthea.itea2.org/model/1.3.0/stimuli|
|http://www.amalthea.itea2.org/model/1.2.0/propertyconstraints |http://www.amalthea.itea2.org/model/1.3.0/propertyconstraints |
|http://www.amalthea.itea2.org/model/1.2.0/os |http://www.amalthea.itea2.org/model/1.3.0/os|
|http://www.amalthea.itea2.org/model/1.2.0/mapping |http://www.amalthea.itea2.org/model/1.3.0/mapping |
|http://www.amalthea.itea2.org/model/1.2.0/hw |http://www.amalthea.itea2.org/model/1.3.0/hw|
|http://www.amalthea.itea2.org/model/1.2.0/events |http://www.amalthea.itea2.org/model/1.3.0/events |
|http://www.amalthea.itea2.org/model/1.2.0/constraints |http://www.amalthea.itea2.org/model/1.3.0/constraints |
|http://www.amalthea.itea2.org/model/1.2.0/config |http://www.amalthea.itea2.org/model/1.3.0/config |
|http://www.amalthea.itea2.org/model/1.2.0/common |http://www.amalthea.itea2.org/model/1.3.0/common |
|http://www.amalthea.itea2.org/model/1.2.0/central |http://www.amalthea.itea2.org/model/1.3.0/central |
|http://amalthea.itea2.org/model/1.2.0/components|http://amalthea.itea2.org/model/1.3.0/components|


* *Below are the changes in the reference names :*

table(classic){margin-left:40px}. 
| *_Variable Name (version ITEA 1.1.0)_* | *_Changed Variable Name (version ITEA 1.1.1)_* | *_Class containing Variable_* | *_AMALTHEA sub model_* | *_how migration is done from 1.1.0 models to 1.1.1_* |
| tagName | name | Tag | Software model, Components model | attribute "tagName" is changed to "name" in all the places where Tag definition is present |
| elements | components, systems  | ComponentsModel | Components model | <div> <ol><li>XML child elements of ComponentsModel having name as "elements" and attribute "xsi:type" as either "components:Component" or "components:Composite" are changed to "components"</li><li> XML child elements of ComponentsModel having name as "elements" and attribute "xsi:type" as "components:System" are changed to "systems" </li></ol></div> |
| elements | connectors, componentInstances  | System | Components model | <div> <ol><li>XML child elements of System having name as "elements" and attribute "xsi:type" as "components:Connector" are changed to "components"</li><li> XML child elements of ComponentsModel having name as "elements" and attribute "xsi:type" as "components:ComponentInstance" are changed to "componentInstances" </li></ol></div> |
| maximumCyle | maximumCycle | DataAgeCycle | Constraints model | attribute "maximumCyle" is changed to "maximumCycle" in all the places where DataAgeCycle definition is present |
| setLabelsList | setModeValueList | Stimulus | Stimuli model | XML node name is set as "setModeValueList" |
| enablingLabelsList | enablingModeValueList | Stimulus | Stimuli model | XML node name is set as "enablingModeValueList" |
| disablingLabelsList | disablingModeValueList | Stimulus | Stimuli model | XML node name is set as "disablingModeValueList" |

* *Below are the references which are removed:*

table(classic){margin-left:40px}. 
| *_Variable Name (version ITEA 1.1.0)_* |  *_Class containing Variable_* | *_AMALTHEA sub model_* | *_how migration is done from 1.1.0 models to 1.1.1_* |
|deadline|Task, ISR, ProcessPrototype| Software model| <div>"deadline" specified at the Process, ProcessPrototype is converted into a constraint element in the following way: <ul><li>with the name of corresponding Process/ProcessPrototype -&gt; ProcessRequirement object is created and the object of Process/ProcessPrototype is linked to it</li><li>TimeRequirement object is created with the following properties and associated to the created ProcessRequirement: <br/><ol><li>limitType as upperlimit</li><li>metric as responsetime</li><li>SignedTime elment is created with the following properties and associated to the TimeRequirement element : value and unit - &gt; values for these elements are fetched from the "deadline" object available at Process/ProcessPrototype</li></ol> </li> <li> once the required content from the "deadline" element of Process/ProcessPrototype is fetched, "deadline" is removed </li></ul></div>|
|initialValue|Label|Software model|Initial value attribute is removed from all the Label objects|

* *Below are the changes in the default values of Enums*  :

table(classic){margin-left:40px}. 
| *_Enum Name_*| *_Default value (version ITEA 1.1.0)_* | *_Default value (version ITEA 1.1.1)_* | *_AMALTHEA sub model_* |*_Behaviour model migration to migrated 1.1.0 models to 1.1.1_* |
| TimeUnit | ps | <notextile>_undefined_</notextile> | Common model |Attribute "unit" with value as "ps" is created (when it is missing in the input model) -> for all the XMI tags where TimeUnit defintion should be present   |
| InterfaceKind | PROVIDES | <notextile>_undefined_</notextile> | Components model |Attribute "kind" with value as "PROVIDES" is created (when it is missing in the input model) -> for all the XMI tags where InterfaceKind defintion should be present   |
| RunnableOrderType | successor | <notextile>_undefined_</notextile> | Constraints model |Attribute "orderType" with value as "successor" is created (when it is missing in the input model)-> for all the XMI tags where RunnableOrderType defintion should be present   |
| RunnableGroupingType | allOfThem | <notextile>_undefined_</notextile> | Constraints model |Attribute "groupingType" with value as "allOfThem" is created (when it is missing in the input model)-> for all the XMI tags where RunnableGroupingType defintion should be present   |
| QType | DYNAMIC | <notextile>_undefined_</notextile> | Hardware model |Attribute "type" with value as "DYNAMIC" is created (when it is missing in the input model)-> for all the XMI tags where QType defintion should be present   |
| MemoryType | RAM | <notextile>_undefined_</notextile> | Hardware model |Attribute "type" with value as "RAM" is created (when it is missing in the input model)-> for all the XMI tags where MemoryType defintion should be present   |
| BusType | CAN | <notextile>_undefined_</notextile> | Hardware model |Attribute "busType" with value as "CAN" is created (when it is missing in the input model)-> for all the XMI tags where BusType defintion should be present   |
| RWType | R | <notextile>_undefined_</notextile> | Hardware model |Attribute "direction" with value as "R" is created (when it is missing in the input model)-> for all the XMI tags where RWType defintion should be present   |
| SchedType | RROBIN | <notextile>_undefined_</notextile> | Hardware model |Attribute "schedPolicy" with value as "RROBIN" is created (when it is missing in the input model)-> for all the XMI tags where SchedType defintion should be present   |
| PinType | ANALOG | <notextile>_undefined_</notextile> | Hardware model |Attribute "type" with value as "ANALOG" is created (when it is missing in the input model)-> for all the XMI tags where PinType defintion should be present   |
| FeatureType | floatingPointUnit | <notextile>_undefined_</notextile> | Hardware model |Attribute "value" with value as "floatingPointUnit" is created (when it is missing in the input model)-> for all the XMI tags where FeatureType defintion should be present   |
| MemoryAddressMappingType | none | <notextile>_undefined_</notextile> | Mapping model |Attribute "addressMappingType" with value as "none" is created (when it is missing in the input model)-> for all the XMI tags where MemoryAddressMappingType defintion should be present   |
| ComparatorType | equal | <notextile>_undefined_</notextile> | Property Constraints model |Attribute "comparator" with value as "equal" is created (when it is missing in the input model)-> for all the XMI tags where ComparatorType defintion should be present   |
| ConjunctionType | and | <notextile>_undefined_</notextile> | Property Constraints model |Attribute "conjunction" with value as "and" is created (when it is missing in the input model)-> for all the XMI tags where ConjunctionType defintion should be present   |
| WaitEventType | AND | <notextile>_undefined_</notextile> | Software model |Attribute "maskType" with value as "AND" is created (when it is missing in the input model)-> for all the XMI tags where WaitEventType defintion should be present   |
| WaitingBehaviour | unspecified | <notextile>_undefined_</notextile> | Software model | In sw:WaitEvent/ sw:SynchronousServerCall / sw:SynchronousServerCall -> if attribute "waitingBehaviour" is with value as "unspecified", then attribute "waitingBehaviour" and its value are removed in the XML, so that the default value for "waitingBehaviour" as per 1.1.1 :  "_ _unspecified_ _" is consisdered|
| AccessPrecedenceType | ignoreWR | <notextile>_undefined_</notextile> | Software model |Attribute "orderType" with value as "ignoreWR" is created (when it is missing in the input model)-> for all the XMI tags where AccessPrecedenceType defintion should be present   |
| OrderType | order | <notextile>_undefined_</notextile> | Software model |Attribute "orderType" with value as "order" is created (when it is missing in the input model)-> for all the XMI tags where OrderType defintion should be present   |
| LabelAccessEnum | read | <notextile>_undefined_</notextile> | Software model |Attribute "access" with value as "read" is created (when it is missing in the input model)-> for all the XMI tags where LabelAccessEnum defintion should be present   |
| SemaphoreAccessEnum | request | <notextile>_undefined_</notextile> | Software model |Attribute "accessEnum" with value as "request" is created (when it is missing in the input model)-> for all the XMI tags where SemaphoreAccessEnum defintion should be present   |
| Preemption | cooperative | <notextile>_undefined_</notextile> | Software model |Attribute "preemption" with value as "cooperative" is created (when it is missing in the input model)-> for all the XMI tags where Preemption defintion should be present   |


* *Below are the Class's/Enum's moved to different sub models*  :

table(classic){margin-left:40px}. 
| *_Enum/Class Name_*| *_Namespace (version ITEA 1.1.0)_* | *_Namespace (version ITEA 1.1.1)_* |*_Behaviour model migration to migrated 1.1.0 models to 1.1.1_* |
| SchedulingSWUnit | sw | os |Attribute "xsi:type" of XML node of TaskScheduler/InterruptController is updated to "os:SchedulingSWUnit"   |


* *ITEA 1.1.0 Class's removed in ITEA 1.1.1, details how data of these class's is migrated* :

  <div style="margin-left:40px">
- *_LabelSwitchEntry_* _(present in Software model)_ := Class is removed in ITEA 1.1.1, and as replacement following Class is introduced:  "ModeSwitchEntry" 
- *_LabelSwitch_* _(present in Software model)_ := Class is removed in ITEA 1.1.1, and as replacement following Class's are introduced:  "ModeSwitch, ModeLabel" 
- *LabelValueEntry* _(present in Stimuli model)_ := Class is removed in ITEA 1.1.1, and as replacement following Class is introduced:  "ModeValueListEntry" 

  </div>

* *Model migration behavior*:
** *_LabelSwitch_* : <div><ul><li>From the referred "Label" element inside "LabelSwitch", "ModeLabel" element is created with the same name -> and associated to the same Software Model where "Label" element is defined</li><li>"LabelSwitch" element is replaced with "ModeSwitch" element, and it refers to the "ModelLabel" (created in the above step)</li></ul></div>
** *_LabelSwitchEntry_* : <div><ul><li>For all the LabelSwitchEntry objects inside a specific AMALTHEA model file, a single "Mode" element is created ( with the following naming convention :  "mode_sw_&lt;counter&gt;_migration_generated" )</li><li>Based on the unique values of LabelSwitchEntry elements, ModeLiteral objects are created</li><li> LabelSwitchEntry is replaced by ModeSwitchEntry, based on the earlier "value" specified for LabelSwitchEntry -&gt; corresponding ModeLiteral element is referred </li></ul></div>
*** For details refer to the below figure: <br/><br/> !(gray_scale)../pictures/labelswitch_migration.png! <br/><br/>
** *_LabelValueEntry_* :  <div><ul><li>For Label referred inside each LabelValueEntry, corresponding ModeLabel object is created in the software model and it is associated to the entry object.</li></ul></div><div><ul><li>For all the LabelValueEntry objects inside a specific AMALTHEA model file, a single "Mode" element is created ( with the following naming convention :  "mode_stimuli_&lt;counter&gt;_migration_generated" )</li><li>Based on the unique values of LabelValueEntry elements, ModeLiteral objects are created</li><li> LabelValueEntry is replaced by ModeValueListEntry, based on the "value" specified for LabelValueEntry -&gt; corresponding ModeLiteral element is referred instead of "value" </li><li><p style="color:#4D4DA3;">!! For LabelValueEntry migration to be successful, <b>it is mandatory to have SW-Model in the same model file</b>. In case SW-Model is not present, migration of LabelValueEntry objects will not be performed.</p></li></ul></div>  
*** For details refer to the below figure: <br/><br/> !(gray_scale)../pictures/labelvalueentry_stimuli_migration.png! <br/><br/>


h3. Version ITEA 1.1.1 to App4MC 0.7.0

Below are the changes in the meta model from ITEA 1.1.1 version to APP4MC 0.7.0

* Instead of multiple namespaces (e.g. sw, hw, constraints, components, etc.) a single namespace "am" is introduced
** *Impact on 0.7.0 model file due to this change:* 
*** xmlns:am="http://app4mc.eclipse.org/amalthea/0.7.0 is included in the xmi file, instead of other namespaces (e.g. xmlns:hw, xmlns:sw etc.,)
*** xsi:type attributes will consists of namespace prefix as "am" in the value. Example: <br/> @<ports xsi:type="am:ComplexPort" name="Mem_1_port" bitWidth="16" direction="R" writeCycles="10" readCycles="10"/>@
*** Root tag will have "am" as the prefix. Example: <br/> @<am:HWModel xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:am="http://app4mc.eclipse.org/amalthea/0.7.0"/>@
* Reference pattern is changed. <br/> As there is single model namespace in 0.7.0, namespace prefix is removed before the class name (eg: "ABSMode?type=Label").
** old: @<Element Name>?type=<NameSpace prefix>.<ElementClassName>@
** new: @<Element Name>?type=<ElementClassName>@
* Root tag of the model, changed from *AMALTHEA* to *Amalthea* 
* *IPort* interface is changed to abstract class *Port*
* FInterface reference (i.e. Franca Interface) is removed from class FInterfacePort 
**  *Impact on 0.7.0 model file due to this change:* 
*** If AMALTHEA models from previous versions have the reference to Franca Interface ports, as a part of migration this reference is removed. (_In this case, reference to the Franca Interface element is stored as a CustomProperty of type String inside FInterfacePort element_)
* InterfaceKind ENUM literal values are changed from PROVIDES, REQUIRES to provides, requires
* Following class names are changed <br/><br/>  

table(classic){margin-left:40px}. 
|**Class name from 1.1.1** | **Changed Class name in 0.7.0** |
| OSEvent | OsEvent |
| MemType | MemoryType |
| System | HwSystem |
| Component | HwComponent |
| Port | HwPort |
| AbstractionTypeDescription | AbstractionType |
| MemoryType | MemoryTypeEnum |
| OSInstructions | OsInstructions |
| Periodic | PeriodicActivation |

* Below references are removed inside ComplexNode and HardwareTypeDescription (_both these class's are part of Hardware Model_)
** AbstractType[] attribute , AbstractType[] features
*** *Impact on 0.7.0 model file due to this change:* Content inside the attribute and features is stored as a CustomProperty elements inside the corresponding elements. 
**** Content of "AbstractType[] attribute" is stored in the CustomProperty, with key as "attribute#<attribute name>" and value as <attribute value>
**** Content of "AbstractType[] features" is stored in the CustomProperty, with key as "feature#<feature name>" and value as <feature value>
*** Below figure shows the changes between 1.1.1 model (_containing attributes & features_) and the corresponding 0.7.0 model (_created using model migration utility_)!(gray_scale)../pictures/hwmodel_attributes_features.png! 
* ProcessAllocation class removed from MappingModel, instead ISRAllocation (_maps ISR and InterruptController_)  and TaskAllocation (_maps Task and Scheduler_) 
** *Impact on 0.7.0 model file due to this change:* 
*** processAllocation tag is removed from mappingModel, and instead of this taskAllocation and isrAllocation tags will be generated accordingly. <br/> For details refer to the image <br/> !(gray_scale)../pictures/mappingmodel_processallocations.png!
* Below are the changes in the reference names :

table(classic){margin-left:40px}. 
| *_Variable Name (version ITEA 1.1.1)_* | *_Changed Variable Name (version APP4MC 0.7.0)_* | *_Class containing Variable_* | *_AMALTHEA sub model_* |
| isMaster | master | ComplexPort | Hardware model |
| mem | memory | Mapping | Mapping model  |
| memTypeDefinitions | memoryTypeDefinitions| PropertyConstraintsModel  | Property Constraints model |
| isDefault | default | ModeSwitchEntry | Software model |
| isBuffered | buffered | Label | Software model |
| isBuffered | buffered | LabelAccess | Software model |
| accessEnum | access | SemaphoreAccess | Software model |
| isBuffered | buffered | SenderReceiverCommunication | Software model |
| isOrdered | ordered | Group | Software model |

h3. Version APP4MC 0.7.0 to App4MC 0.7.1

Below are the changes in the meta model from APP4MC 0.7.0 to APP4MC 0.7.1

*Change in the namespace:* 

table(classic){margin-left:40px}. 
| *_AMALTHEA Namespace (version App4MC 0.7.0)_* | *_AMALTHEA Namespace  (version App4MC 0.7.1)_* |
|http://app4mc.eclipse.org/amalthea/0.7.0 |http://app4mc.eclipse.org/amalthea/0.7.1 |

*Root Tag in AMALTHEA model amxmi file*: It is recommended to have "Amalthea" as a root tag in amxmi file.

Based on the above statement, if the AMALTHEA model file is having sub-model tag as root element (e.g. SWModel or HWModel etc.,), as a part of model migration -> root element is changed as "Amalthea" tag and the content of sub-model is copied inside it. 

 Input model (containing SWModel as the root tag):
 
bc. 
 "<am:SWModel xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:am="http://app4mc.eclipse.org/amalthea/0.7.0">
  <labels/>
</am:SWModel>"


 Output model (after model migration):
 
bc.  <am:Amalthea xmlns:am="http://app4mc.eclipse.org/amalthea/0.7.0" xmlns:xmi="http://www.omg.org/XMI">
  <swModel>
    <labels />
  </swModel>
</am:Amalthea> 


 
*Below are the changes in the reference names:*

table(classic){margin-left:40px}. 
| *_Variable Name (version APP4MC 0.7.0)_* | *_Changed Variable Name (version APP4MC 0.7.1)_* | *_Class containing Variable_* | *_AMALTHEA sub model_* | *_Model Migration behavior_* |
| graphEntries | items | ModeSwitchEntry | SW Model | xml tag "graphEntries" present inside "ModeSwitchEntry" object is changed to "items" in amxmi file|
| value | values | ModeSwitchEntry | SW Model | xml tag "value" present inside "ModeSwitchEntry" object is changed to "values" in amxmi file |
 
 
 
*Below are the changes in the reference Types:*

table(classic){margin-left:40px}. 
| *_Variable Name_* | *_Variable Type (version APP4MC 0.7.0)_* | *_Variable Type (version APP4MC 0.7.1)_* | *_Class containing Variable_*| *_AMALTHEA sub model_* | *_Model Migration behavior_* |
| size | Long | DataSize |MemoryType |HW Model, PropertyConstraintsModel |Attribute "size" is migrated as "DataSize" object. Long value of "size" is migrated to "value" of DataSize. As the DataSizeUnit info is not available, "unit" value is not set |
| size | DataUnit | DataSize | AbstractElementMemoryInformation  | SW Model|"size" of type "DataUnit" is migrated as "DataSize" object. Int value of "numberBits" attribute is migrated to "value" of DataSize, "unit" attribute is set as "bit" of type DataSizeUnit|
| size | DataUnit | DataSize | BaseTypeDefinition  | SW Model|"size" of type "DataUnit" is migrated as "DataSize" object. Int value of "numberBit" attribute is migrated to "value" of DataSize, "unit" attribute is set as "bit" of type DataSizeUnit|
| frequency | EInt | Frequency | Quartz  |SW Model| Attribute "frequency" of type EInt is migrated as "Frequency" object. "frequency" EInt value is migrated to "value" EDouble of DataSize. As the FrequencyUnit info is not available, "unit" value is not set |


*Below references are removed:*

table(classic){margin-left:40px}. 
| *_Variable Name_* | *_Variable Type_* | *_Class containing Variable_*| *_AMALTHEA sub model_* | *_Model Migration behavior_* |
| size | DataUnit | Section  |SW Model |Content is removed from the model as size can't be specified for "Section" (considered as virtual memory section) |
| labels | [0-*] Label | Section  |SW Model |Content is removed from the model. As per APP4MC 0.7.1 semantics, Label object has the association to the Section inside which it can be allocated|
| runEntities | [0-*] Runnable | Section  |SW Model |Content is removed from the model. As per APP4MC 0.7.1 semantics, Runnable object has the association to the Section inside which it can be allocated|
| groupingType | RunnableGroupingType | ProcessRunnableGroup  |Constraints Model |Content is removed from the model|
| entries | [0-*] ProcessRunnableGroupEntry | ProcessRunnableGroup  |Constraints Model |Content is removed from the model. Runnable object belonging to the ProcessRunnableGroupEntry is associated to the runnables list contained at the ProcessRunnableGroup object|
| default | EBoolean | ModeSwitchEntry  |SW Model |Content removed from the model. If several ModeSwitchEntry objects contain attribute "default" as "true", then first ModeSwitchEntry which has "default" as "true" is converted to "ModeSwitchDefault" object |

*Below Classes are removed:*

table(classic){margin-left:40px}. 
| *_Class Name_* | *_AMALTHEA sub model_* | *_Model Migration behavior_* |
|SchedulerPairingConstraint|Constraints Model|Content is removed from the model. There is no equivalent of this model element in APP4MC 0.7.1|
|SchedulerSeparationConstraint|Constraints Model|Content is removed from the model. There is no equivalent  of this model element in APP4MC 0.7.1|
|ProcessRunnableGroupEntry|Constraints Model|This element is removed from the model, but the Runnables associated to it are associated to ProcessRunnableGroup object|
|OrderConstraint|Constraints Model|Content is removed from the model. There is no equivalent of this model element in APP4MC 0.7.1|
|AgeConstraint|Constraints model|Content is migrated as EventChainLatencyConstraint element with LatencyType as "Age" |
|ReactionConstraint|Constraints model|Content is migrated as EventChainLatencyConstraint element with LatencyType as "Reaction" |
|SynchronisationConstraint|Constraints model|Content is migrated as EventSynchronizationConstraint element|
|SectionMapping|Mapping Model|Content is removed from the model. As per 0.7.1, there is a possibility to specify PhysicalSectionMapping element i.e. defining mapping of various Section elements to Memory|
|SectionMappingConstraint|Property Constraints Model|Content is removed from the model.As per 0.7.1, there is a possibility to specify PhysicalSectionConstraint element i.e. defining possibility of Section allocation across various Memories |
|DataUnit|Sw model| Content is migrated as DataSize. Attribute "unit" is set as DataSizeUnit of type "bit"| 

h3. Version APP4MC 0.7.1 to APP4MC 0.7.2

*Change in the namespace:* 

table(classic){margin-left:40px}. 
| *_AMALTHEA Namespace (version App4MC 0.7.1)_* | *_AMALTHEA Namespace  (version App4MC 0.7.2)_* |
|http://app4mc.eclipse.org/amalthea/0.7.1 |http://app4mc.eclipse.org/amalthea/0.7.2 |


*Below are the changes in the reference names:*

table(classic){margin-left:40px}. 
| *_Variable Name (version APP4MC 0.7.1)_* | *_Changed Variable Name (version APP4MC 0.7.2)_* | *_Class containing Variable_* | *_AMALTHEA sub model_* | *_Model Migration behavior_* |
|runnables|group|RunnablePairingConstraint|Constraints Model |xml tag "runnables" present inside "RunnablePairingConstraint" object is changed to "group" in amxmi file|
|processes|group|ProcessPairingConstraint|Constraints Model |xml tag "processes" present inside "ProcessPairingConstraint" object is changed to "group" in amxmi file|
|labels|group|DataPairingConstraint|Constraints Model |xml tag "labels" present inside "DataPairingConstraint" object is changed to "group" in amxmi file|
|initalValue|initialValue|Semaphore|OS Model |xml attribute "initalValue" present inside "Semaphore" object is changed to "initialValue" in amxmi file|
|arrivalCurveEntries|entries|ArrivalCurve|Stimuli Model |xml tag "arrivalCurveEntries" present inside "ArrivalCurve" object is changed to "entries" in amxmi file|

*Below are the changes in the reference Types:*

table(classic){margin-left:40px}. 
| *_Variable Name_* | *_Variable Type (version APP4MC 0.7.1)_* | *_Variable Type (version APP4MC 0.7.2)_* | *_Class containing Variable_*| *_AMALTHEA sub model_* | *_Model Migration behavior_* |
|instructions|OsExecutionInstructions|Instructions|SchedulingSWUnit|OS Model |type of the instructions tag in amxmi is updated either to InstructionsConstant or InstructionsDeviation based on if the type in input is : OsExecutionInstructionsConstant or OsExecutionInstructionsDeviation|
|apiSendMessage|OsExecutionInstructions|Instructions|OsAPIInstructions|OS Model |type of the apiSendMessage tag in amxmi is updated either to InstructionsConstant or InstructionsDeviation based on if the type in input is : OsExecutionInstructionsConstant or OsExecutionInstructionsDeviation|
|apiTerminateTask|OsExecutionInstructions|Instructions|OsAPIInstructions|OS Model |type of the apiTerminateTask tag in amxmi is updated either to InstructionsConstant or InstructionsDeviation based on if the type in input is : OsExecutionInstructionsConstant or OsExecutionInstructionsDeviation|
|apiSchedule|OsExecutionInstructions|Instructions|OsAPIInstructions|OS Model |type of the apiSchedule tag in amxmi is updated either to InstructionsConstant or InstructionsDeviation based on if the type in input is : OsExecutionInstructionsConstant or OsExecutionInstructionsDeviation|
|apiRequestResource|OsExecutionInstructions|Instructions|OsAPIInstructions|OS Model |type of the apiRequestResource tag in amxmi is updated either to InstructionsConstant or InstructionsDeviation based on if the type in input is : OsExecutionInstructionsConstant or OsExecutionInstructionsDeviation|
|apiReleaseResource|OsExecutionInstructions|Instructions|OsAPIInstructions|OS Model |type of the apiReleaseResource tag in amxmi is updated either to InstructionsConstant or InstructionsDeviation based on if the type in input is : OsExecutionInstructionsConstant or OsExecutionInstructionsDeviation|
|apiSetEvent|OsExecutionInstructions|Instructions|OsAPIInstructions|OS Model |type of the apiSetEvent tag in amxmi is updated either to InstructionsConstant or InstructionsDeviation based on if the type in input is : OsExecutionInstructionsConstant or OsExecutionInstructionsDeviation|
|apiWaitEvent|OsExecutionInstructions|Instructions|OsAPIInstructions|OS Model |type of the apiWaitEvent tag in amxmi is updated either to InstructionsConstant or InstructionsDeviation based on if the type in input is : OsExecutionInstructionsConstant or OsExecutionInstructionsDeviation|
|apiClearEvent|OsExecutionInstructions|Instructions|OsAPIInstructions|OS Model |type of the apiClearEvent tag in amxmi is updated either to InstructionsConstant or InstructionsDeviation based on if the type in input is : OsExecutionInstructionsConstant or OsExecutionInstructionsDeviation|
|apiActivateTask|OsExecutionInstructions|Instructions|OsAPIInstructions|OS Model |type of the apiActivateTask tag in amxmi is updated either to InstructionsConstant or InstructionsDeviation based on if the type in input is : OsExecutionInstructionsConstant or OsExecutionInstructionsDeviation|
|apiEnforcedMigration|OsExecutionInstructions|Instructions|OsAPIInstructions|OS Model |type of the apiEnforcedMigration tag in amxmi is updated either to InstructionsConstant or InstructionsDeviation based on if the type in input is : OsExecutionInstructionsConstant or OsExecutionInstructionsDeviation|


*Below are the changes in the relation of elements:*

table(classic){margin-left:40px}. 
| *_Variable Name_* | *_Variable Type_* | *_Variable Relation (version APP4MC 0.7.1)_* | *_Variable Relation (version APP4MC 0.7.2)_* | *_Class containing Variable_*| *_AMALTHEA sub model_* | *_Model Migration behavior_* |
|memory|Memory|containment|association|HwMemoryProperty|PropertyConstraints model|memory objects containment is changed as association relation. As a result definition of Memory object should not be present inside HwMemoryProperty, rather only reference of memory should be present inside HwMemoryProperty.  Model migration is performed in the following way for this change : Memory elements definition from HwMemoryProperty tag are moved to HW Model (Note: addition of Memory (from PropertyConstraints model) to HW model happens only if Memory with this name is not existing in the model scope)|
|core|Core|containment|association|HwCoreProperty|PropertyConstraints model|core objects containment is changed as association relation. As a result definition of Core object should not be present inside HWCoreProperty, rather only reference of core should be present inside HWCoreProperty.  Model migration is performed in the following way for this change : Core elements definition from HwCoreProperty tag are moved to HW Model (Note: addition of Memory (from PropertyConstraints model) to HW model happens only if Memory with this name is not existing in the model scope)|

*Below are the changes in Enum elements:*

table(classic){margin-left:40px}. 
| *_Enum Name_* | *_Enum Literal (version APP4MC 0.7.1)_* | *_Enum Literal (version APP4MC 0.7.2)_* | *_AMALTHEA sub model_* | *_Model Migration behavior_* |
|Preemption|unknown|-|SW Model|unknown literal is removed from Preemption. Model Migration will replace "unknown" literal with the default literal|



*Below references are removed:*

table(classic){margin-left:40px}. 
| *_Variable Name (version APP4MC 0.7.1)_* | *_Variable Type_* | *_Class containing Variable_*| *_AMALTHEA sub model_* | *_Model Migration behavior_* |
|samplingType|SamplingType|Deviation|Hardware Model  Stimuli MOdel  OS Model  Software Model|In 0.7.2, samplingType attribute is shifted from Deviation to Boundaries element.As a part of Model migration -> samplingType content is removed from Deviation and associated to the corresponding Distribution of type Boundaries. If Boundaries element is not present inside Deviation as a distribution, corresponding samplingType data is skipped during model migration|
|coreTypeDefinitions|CoreType|PropertyConstraintsModel|Property Constraints Model|coreTypeDefinitions objects are removed from the PropertyConstraintsModel tag and are associated to HW Model (Note: addition of CoreType to HW model happens only if CoreType with this name is not existing in the model scope. If there exists CoreType element with the same name in "PropertyConstraintsModel" and in "HW Model" --> the one from PropertyConstraintsModel will be removed and the one from HW Model will be referred accordingly inside Core element etc.,)|
|memoryTypeDefinitions|MemoryType|PropertyConstraintsModel|Property Constraints Model|memoryTypeDefinitions objects are removed from the PropertyConstraintsModel tag and are associated to HW Model (Note: addition of MemoryType to HW model happens only if MemoryType with this name is not existing in the model scope . If there exists MemoryType element with the same name in "PropertyConstraintsModel" and in "HW Model" --> the one from PropertyConstraintsModel will be removed and the one from HW Model will be referred accordingly inside MemoryElement element etc.,)|
|tags|Tag|ComponentsModel, HWModel, SWModel|Components Model, Hardware Model, Software Model|Tag objects are removed from the ComponentsModel,HWModel,SWModel tags and their content is shifted to CommonElements Model (Note: CommonElements model is contained inside Amalthea root node)|

*Below Classes are removed:*

table(classic){margin-left:40px}. 
| *_Class Name (version APP4MC 0.7.1)_* | *_AMALTHEA sub model_* | *_Model Migration behavior_* |
|TargetProcess|Constraints Model|Content is removed from the model. There is no equivalent of this model element in APP4MC 0.7.2|
|TargetCallSequence|Constraints Model|Content is removed from the model. There is no equivalent of this model element in APP4MC 0.7.2|
|OsExecutionInstructions, OsExecutionInstructionsDeviation, OsExecutionInstructionsConstant |OS Model|Replacement elements are : Instructions,InstructionsDeviation,InstructionsConstant. As there is no change in the content of these elements(when compared to previous elements) -> during model migration corresponding old type names are replaced with the new model elements  |
|ProbabilityGroup|SW Model|ProbabilityGroup is replaced with RunnableProbabilitySwitch|
|ProbabilityRunnableItem|SW Model|ProbabilityRunnableItem is replaced wtih ProbabilitySwitchEntry|
|DeviationRunnableItem|SW Model|Content of DeviationRunnableItem i.e RunnableItem is moved directly inside the Group as a part of "items" list| 
|EventConfigElement, EventConfigLink|Config Model|Both EventConfigElement and EventConfigLink objects are converted as EventConfig objects (As EventConfigElement & EventConfigLink classes are removed from the MetaModel - as per the semantics equivalent class for both of them is EventConfig). In case of migrating EventConfigElement - If definition of EntityEvent element is present as a sub-element -> it is moved to Events Model and the corresponding reference to EntityEvent is established inside EventConfig using attribute "event"|  
|OsBuffering|OS Model|OsBuffering elements are migrated as OsDataConsistency elements. Below steps describe the criteria considered for migration of data : !(gray_scale)../pictures/OSBuffering_migration_071_072.png!|
|LabelBufferring|SW Model|LabelBufferring elements are migrated as DataStability elements. Below steps describe the criteria considered for migration of data :<br/>  -  If LabelBuffering value is "buffered" then the corresponding value of "dataStability" is set as "CustomProtection"<br/>	-  If LabelBuffering value is "notBuffered" then the corresponding value of "dataStability" is set as "noProtection" <br/>-  If LabelBuffering value is "_undefined_" (default) then the corresponding value of "dataStability" is set as "_undefined_" (default)
|LabelAccessBufferring|SW Model|LabelAccessBufferring elements are migrated as DataStability elements. Below steps describe the criteria considered for migration of data :<br/>  -  If LabelAccessBufferring value is "inherited" then the corresponding value of "dataStability" is set as "inherited"<br/>	-  If LabelAccessBufferring value is "buffered" then the corresponding value of "dataStability" is set as "customProtection" <br/>	-  If LabelAccessBufferring value is "notBuffered" then the corresponding value of "dataStability" is set as "noProtection" <br/>-  If LabelAccessBufferring value is "_undefined_" (default) then the corresponding value of "dataStability" is set as "_undefined_" (default)
|

h3. Version APP4MC 0.7.2 to APP4MC 0.8.0

*Change in the namespace:* 

table(classic){margin-left:40px}. 
| *_AMALTHEA Namespace (version App4MC 0.7.2)_* | *_AMALTHEA Namespace  (version App4MC 0.8.0)_* |
|http://app4mc.eclipse.org/amalthea/0.7.2 |http://app4mc.eclipse.org/amalthea/0.8.0 |

*Below references are removed from storage format (amxmi):*

table(classic){margin-left:40px}. 
| *_Variable Name (version APP4MC 0.7.2)_* | *_Variable Type_* | *_Class containing Variable_*| *_AMALTHEA sub model_* | *_Model Migration behavior_* |
|mode|Mode|ModeValueProvider|SW Model|mode is made as a derived variable and transient property is set to it, as a result it will not be serialized into the model file. Based on the selection of ModeLiteral (in ModeValueProvider element) mode element will be considered accordingly.|
|osDataConsistency|OsDataConsistency|OSModel|OS Model|OsDataConsistency element is shifted from OSModel to OperatingSystem element. As a part of migration, osDataConsistency element content is copied inside each OperatingSystem element|

*Below references names are changed :*

table(classic){margin-left:40px}. 
| *_Variable Name (version APP4MC 0.7.2)_* || *_Variable Name (version APP4MC 0.8.0)_* | *_Variable Type_* | *_Class containing Variable_*| *_AMALTHEA sub model_* | *_Model Migration behavior_* |
| mapping | memoryMapping | Mapping (in 0.7.2) -> MemoryMapping (in 0.8.0)| MappingModel| Mapping model |As there is a change in the reference name (from mapping to memoryMapping) in metamodel -->  corresponding XML tag names in amxmi are changed from mapping to memoryMapping, type attribute is removed from memoryMapping XML tag as MemoryMapping is a concrete class|

*Below Classes/Interfaces are removed:*

table(classic){margin-left:40px}. 
| *_Class Name (version APP4MC 0.7.2)_* | *_AMALTHEA sub model_* | *_Model Migration behavior_* |
|ModeValueProvider (Interface)|SW Model|Content present inside ModeValueProvider class is moved to ModeLabel. Reference to Mode element is made as derived variable, and it automatically populated based on the selection of ModeLiteral.|
|SignedTimeObject|SW Model|Equivalent of this element is TimeObject in APP4MC 0.8.0. There is no change in the storage format.|
|SignedTime|SW Model|Equivalent of this element is Time in APP4MC 0.8.0. There is no change in the storage format.|
|Mapping|Mapping Model|This interface is removed from the model. MemoryMapping is equivalent of this model element in APP4MC 0.8.0. As a part of model migration type attribute is removed from the tag which is defining MemoryMapping.|
|AbstractElementMapping|Mapping Model|MemoryMapping is equivalent of this model element in APP4MC 0.8.0. As a part of model migration type attribute is removed from the tag which is defining MemoryMapping.|
|AbstractElementMemoryInformation|HW Model|AbstractMemoryElement is the equivalent of this model element in APP4MC 0.8.0. There is no change in the storage format.|
|ProbabiltitySwitch|HW Model|ProbabiltitySwitch class is changed to ProbabilitySwitch (typo corrected in the class name). ProbabilitySwitch is the equivalent of this model element in APP4MC 0.8.0|
|AllocationConstraint|PropertyConstraints Model|AllocationConstraint class is changed to CoreAllocationConstraint. In CoreAllocationConstraint -> reference to HwCoreConstraint element is removed, based on this change -> during model migration CustomProperty is created with key as "hwConstraint (element removed during Migration of Model to 0.8.0 version)" and value as the XML content of "hwConstraint" element.|
|MappingConstraint|PropertyConstraints Model|MappingConstraint class is changed to MemoryMappingConstraint. In MemoryMappingConstraint -> reference to HwMemmoryConstraint element is removed, based on this change -> during model migration CustomProperty is created with key as "hwConstraint (element removed during Migration of Model to 0.8.0 version)" and value as the XML content of "hwConstraint" element.|
|HwCoreConstraint, HwCoreConjunction, HwCoreProperty|PropertyConstraints Model|These elements are removed from the model. As a reference XML content is stored as a CustomProperty inside CoreAllocationConstraint|
|HwMemoryConstraint, HwMemoryConjunction, HwMemoryProperty|PropertyConstraints Model|These elements are removed from the model. As a reference XML content is stored as a CustomProperty inside MemoryMappingConstraint|

*Below are the changes in the datatype of elements:*

table(classic){margin-left:40px}. 
| *_Variable Name_* | *_Variable datatype (version APP4MC 0.7.2)_* | *_Variable datatype (version APP4MC 0.8.0)_* | *_Class containing Variable_*| *_AMALTHEA sub model_* | *_Model Migration behavior_* |
|instructionsPerCycle|int|float|CoreType|HW model|int is converted to float|

